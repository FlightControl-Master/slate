<span id=core-database-module></span><h1 id='core-database-module-'>Core.Database Module</h1>
<p>This module contains the DATABASE class, managing the database of mission objects.</p>
<span id=1-a-href-database-class-database-a-class-extends-a-href-base-class-base-a></span><h5 id='1-a-href-database-class-database-a-class-extends-a-href-base-class-base-a-'>1) <a href="#database-class-">DATABASE</a> class, extends <a href="#base-class-">BASE</a></h5>
<p>Mission designers can use the DATABASE class to refer to:</p>

<ul>
<li>STATICS</li>
<li>UNITS</li>
<li>GROUPS</li>
<li>CLIENTS</li>
<li>AIRBASES</li>
<li>PLAYERSJOINED</li>
<li>PLAYERS</li>
<li>CARGOS</li>
</ul>

<p>On top, for internal MOOSE administration purposes, the DATBASE administers the Unit and Group TEMPLATES as defined within the Mission Editor.</p>

<p>Moose will automatically create one instance of the DATABASE class into the <strong>global</strong> object _DATABASE.
Moose refers to _DATABASE within the framework extensively, but you can also refer to the _DATABASE object within your missions if required.</p>
<span id=1-1-database-iterators></span><h5 id='1-1-database-iterators-'>1.1) DATABASE iterators</h5>
<p>You can iterate the database with the available iterator methods.
The iterator methods will walk the DATABASE set, and call for each element within the set a function that you provide.
The following iterator methods are currently available within the DATABASE:</p>

<ul>
<li><a href="#database-foreachunit-iteratorfunction">DATABASE:ForEachUnit()</a>: Calls a function for each <a href="#unit-module-">UNIT</a> it finds within the DATABASE.</li>
<li><a href="#database-foreachgroup-iteratorfunction">DATABASE:ForEachGroup()</a>: Calls a function for each <a href="#group-module-">GROUP</a> it finds within the DATABASE.</li>
<li><a href="#database-foreachplayer-iteratorfunction">DATABASE:ForEachPlayer()</a>: Calls a function for each alive player it finds within the DATABASE.</li>
<li><a href="#database-foreachplayerjoined-iteratorfunction">DATABASE:ForEachPlayerJoined()</a>: Calls a function for each joined player it finds within the DATABASE.</li>
<li><a href="#database-foreachclient-iteratorfunction">DATABASE:ForEachClient()</a>: Calls a function for each <a href="#client-module-">CLIENT</a> it finds within the DATABASE.</li>
<li>DATABASE-ForEachClientAlive-: Calls a function for each alive <a href="#client-module-">CLIENT</a> it finds within the DATABASE.</li>
</ul>
<span id=database-class></span><h2 id='database-class-'>DATABASE Class</h2>
<pre>
Inheritance : The DATABASE Class inherits from the following parents :
BASE
    `-- DATABASE
</pre>
<span id=database-new></span><h3 id='database-new-'>DATABASE:New()</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Define a new DATABASE Object. This DBObject will contain a reference to all Group and Unit Templates defined within the ME and the DCSRTE.</span>
<span class="n">DBObject</span> <span class="o">=</span> <span class="n">DATABASE</span><span class="p">:</span><span class="n">New</span><span class="p">()</span>
</code></pre>
<p>Creates a new DATABASE object, building a set of units belonging to a coalitions, categories, countries, types or with defined prefix names.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-findunit-unitname></span><h3 id='database-findunit-unitname-'>DATABASE:FindUnit(UnitName)</h3>
<p>Finds a Unit based on the Unit Name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> UnitName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class-">UNIT</a>  The found Unit.</li>
</ul>
<span id=database-addunit></span><h3 id='database-addunit-'>DATABASE:AddUnit()</h3>
<p>Adds a Unit based on the Unit Name in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-deleteunit></span><h3 id='database-deleteunit-'>DATABASE:DeleteUnit()</h3>
<p>Deletes a Unit from the DATABASE based on the Unit Name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-addstatic></span><h3 id='database-addstatic-'>DATABASE:AddStatic()</h3>
<p>Adds a Static based on the Static Name in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-deletestatic></span><h3 id='database-deletestatic-'>DATABASE:DeleteStatic()</h3>
<p>Deletes a Static from the DATABASE based on the Static Name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-findstatic-staticname></span><h3 id='database-findstatic-staticname-'>DATABASE:FindStatic(StaticName)</h3>
<p>Finds a STATIC based on the StaticName.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> StaticName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#static-class-">STATIC</a>  The found STATIC.</li>
</ul>
<span id=database-addairbase-airbasename></span><h3 id='database-addairbase-airbasename-'>DATABASE:AddAirbase(AirbaseName)</h3>
<p>Adds a Airbase based on the Airbase Name in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> AirbaseName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<span id=database-deleteairbase-airbasename></span><h3 id='database-deleteairbase-airbasename-'>DATABASE:DeleteAirbase(AirbaseName)</h3>
<p>Deletes a Airbase from the DATABASE based on the Airbase Name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> AirbaseName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<span id=database-findairbase-airbasename></span><h3 id='database-findairbase-airbasename-'>DATABASE:FindAirbase(AirbaseName)</h3>
<p>Finds an AIRBASE based on the AirbaseName.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> AirbaseName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#airbase-class-">AIRBASE</a>  The found AIRBASE.</li>
</ul>
<span id=database-addcargo-cargoname></span><h3 id='database-addcargo-cargoname-'>DATABASE:AddCargo(CargoName)</h3>
<p>Adds a Cargo based on the Cargo Name in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> CargoName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<span id=database-deletecargo-cargoname></span><h3 id='database-deletecargo-cargoname-'>DATABASE:DeleteCargo(CargoName)</h3>
<p>Deletes a Cargo from the DATABASE based on the Cargo Name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> CargoName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<span id=database-findcargo-cargoname></span><h3 id='database-findcargo-cargoname-'>DATABASE:FindCargo(CargoName)</h3>
<p>Finds an CARGO based on the CargoName.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> CargoName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#cargo-class-">CARGO</a>  The found CARGO.</li>
</ul>
<span id=database-findclient-clientname></span><h3 id='database-findclient-clientname-'>DATABASE:FindClient(ClientName)</h3>
<p>Finds a CLIENT based on the ClientName.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> ClientName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#client-class-">CLIENT</a>  The found CLIENT.</li>
</ul>
<span id=database-addclient></span><h3 id='database-addclient-'>DATABASE:AddClient()</h3>
<p>Adds a CLIENT based on the ClientName in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-findgroup-groupname></span><h3 id='database-findgroup-groupname-'>DATABASE:FindGroup(GroupName)</h3>
<p>Finds a GROUP based on the GroupName.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>String</u> GroupName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class-">GROUP</a>  The found GROUP.</li>
</ul>
<span id=database-addgroup></span><h3 id='database-addgroup-'>DATABASE:AddGroup()</h3>
<p>Adds a GROUP based on the GroupName in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-addplayer></span><h3 id='database-addplayer-'>DATABASE:AddPlayer()</h3>
<p>Adds a player based on the Player Name in the DATABASE.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-deleteplayer></span><h3 id='database-deleteplayer-'>DATABASE:DeletePlayer()</h3>
<p>Deletes a player from the DATABASE based on the Player Name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-spawn-spawntemplate></span><h3 id='database-spawn-spawntemplate-'>DATABASE:Spawn(SpawnTemplate)</h3>
<p>Instantiate new Groups within the DCSRTE.
This method expects EXACTLY the same structure as a structure within the ME, and needs 2 additional fields defined:
SpawnCountryID, SpawnCategoryID
This method is used by the SPAWN class.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>List[]</u> SpawnTemplate</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-setstatusgroup></span><h3 id='database-setstatusgroup-'>DATABASE.SetStatusGroup()</h3>
<h4> Parameters </h4>

<h4> Returns </h4>
<span id=database-getstatusgroup></span><h3 id='database-getstatusgroup-'>DATABASE.GetStatusGroup()</h3>
<h4> Parameters </h4>

<h4> Returns </h4>
<span id=database-getstaticunittemplate></span><h3 id='database-getstaticunittemplate-'>DATABASE:GetStaticUnitTemplate()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=database-foreach-iteratorfunction></span><h3 id='database-foreach-iteratorfunction-'>DATABASE:ForEach(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for the given set, providing the Object for each element within the set and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called when there is an alive player in the database.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-foreachunit-iteratorfunction></span><h3 id='database-foreachunit-iteratorfunction-'>DATABASE:ForEachUnit(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for each <strong>alive</strong> UNIT, providing the UNIT and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a UNIT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-foreachgroup-iteratorfunction></span><h3 id='database-foreachgroup-iteratorfunction-'>DATABASE:ForEachGroup(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for each <strong>alive</strong> GROUP, providing the GROUP and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a GROUP parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-foreachplayer-iteratorfunction></span><h3 id='database-foreachplayer-iteratorfunction-'>DATABASE:ForEachPlayer(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for each <strong>ALIVE</strong> player, providing the player name and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept the player name.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-foreachplayerjoined-iteratorfunction></span><h3 id='database-foreachplayerjoined-iteratorfunction-'>DATABASE:ForEachPlayerJoined(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for each player who has joined the mission, providing the Unit of the player and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a UNIT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-foreachclient-iteratorfunction></span><h3 id='database-foreachclient-iteratorfunction-'>DATABASE:ForEachClient(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for each CLIENT, providing the CLIENT to the function and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called object in the database. The function needs to accept a CLIENT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-foreachcargo-iteratorfunction></span><h3 id='database-foreachcargo-iteratorfunction-'>DATABASE:ForEachCargo(IteratorFunction)</h3>
<p>Iterate the DATABASE and call an iterator function for each CARGO, providing the CARGO object to the function and optional parameters.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a CLIENT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class-">DATABASE</a></li>
</ul>
<span id=database-oneventnewcargo-eventdata></span><h3 id='database-oneventnewcargo-eventdata-'>DATABASE:OnEventNewCargo(EventData)</h3>
<p>Handles the OnEventNewCargo event.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData</li>
</ul>

<h4> Returns </h4>
<span id=database-oneventdeletecargo-eventdata></span><h3 id='database-oneventdeletecargo-eventdata-'>DATABASE:OnEventDeleteCargo(EventData)</h3>
<p>Handles the OnEventDeleteCargo.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class-">DATABASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData</li>
</ul>

<h4> Returns </h4>
