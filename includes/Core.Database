<h1 id='core-database-module'>Core.Database Module</h1>
<p>This module contains the DATABASE class, managing the database of mission objects.</p>
<h5 id='1-a-href-database-class-database-a-class-extends-a-href-base-class-base-a'>1) <a href="#database-class">DATABASE</a> class, extends <a href="#base-class">BASE</a></h5>
<p>Mission designers can use the DATABASE class to refer to:</p>

<ul>
<li>STATICS</li>
<li>UNITS</li>
<li>GROUPS</li>
<li>CLIENTS</li>
<li>AIRBASES</li>
<li>PLAYERSJOINED</li>
<li>PLAYERS</li>
<li>CARGOS</li>
</ul>

<p>On top, for internal MOOSE administration purposes, the DATBASE administers the Unit and Group TEMPLATES as defined within the Mission Editor.</p>

<p>Moose will automatically create one instance of the DATABASE class into the <strong>global</strong> object _DATABASE.
Moose refers to _DATABASE within the framework extensively, but you can also refer to the _DATABASE object within your missions if required.</p>
<h5 id='1-1-database-iterators'>1.1) DATABASE iterators</h5>
<p>You can iterate the database with the available iterator methods.
The iterator methods will walk the DATABASE set, and call for each element within the set a function that you provide.
The following iterator methods are currently available within the DATABASE:</p>

<ul>
<li><a href="#database-foreachunit-iteratorfunction">DATABASE:ForEachUnit()</a>: Calls a function for each <a href="#unit-module">UNIT</a> it finds within the DATABASE.</li>
<li><a href="#database-foreachgroup-iteratorfunction">DATABASE:ForEachGroup()</a>: Calls a function for each <a href="#group-module">GROUP</a> it finds within the DATABASE.</li>
<li><a href="#database-foreachplayer-iteratorfunction">DATABASE:ForEachPlayer()</a>: Calls a function for each alive player it finds within the DATABASE.</li>
<li><a href="#database-foreachplayerjoined-iteratorfunction">DATABASE:ForEachPlayerJoined()</a>: Calls a function for each joined player it finds within the DATABASE.</li>
<li><a href="#database-foreachclient-iteratorfunction">DATABASE:ForEachClient()</a>: Calls a function for each <a href="#client-module">CLIENT</a> it finds within the DATABASE.</li>
<li>DATABASE-ForEachClientAlive: Calls a function for each alive <a href="#client-module">CLIENT</a> it finds within the DATABASE.</li>
</ul>
<h2 id='database-class'>DATABASE Class</h2>
<pre>
Inheritance : The DATABASE Class inherits from the following parents :
BASE
    `-- DATABASE
</pre>
<h3 id='database-new'>DATABASE:New()</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Define a new DATABASE Object. This DBObject will contain a reference to all Group and Unit Templates defined within the ME and the DCSRTE.</span>
<span class="n">DBObject</span> <span class="o">=</span> <span class="n">DATABASE</span><span class="p">:</span><span class="n">New</span><span class="p">()</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-findunit-unitname'>DATABASE:FindUnit(UnitName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> UnitName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a> The : found Unit.</li>
</ul>
<h3 id='database-addunit'>DATABASE:AddUnit()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-deleteunit'>DATABASE:DeleteUnit()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-addstatic'>DATABASE:AddStatic()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-deletestatic'>DATABASE:DeleteStatic()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-findstatic-staticname'>DATABASE:FindStatic(StaticName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> StaticName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#static-class">STATIC</a> The : found STATIC.</li>
</ul>
<h3 id='database-addairbase-airbasename'>DATABASE:AddAirbase(AirbaseName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> AirbaseName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<h3 id='database-deleteairbase-airbasename'>DATABASE:DeleteAirbase(AirbaseName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> AirbaseName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<h3 id='database-findairbase-airbasename'>DATABASE:FindAirbase(AirbaseName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> AirbaseName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#airbase-class">AIRBASE</a> The : found AIRBASE.</li>
</ul>
<h3 id='database-addcargo-cargoname'>DATABASE:AddCargo(CargoName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> CargoName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<h3 id='database-deletecargo-cargoname'>DATABASE:DeleteCargo(CargoName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> CargoName : The name of the airbase</li>
</ul>

<h4> Returns </h4>
<h3 id='database-findcargo-cargoname'>DATABASE:FindCargo(CargoName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> CargoName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#cargo-class">CARGO</a> The : found CARGO.</li>
</ul>
<h3 id='database-findclient-clientname'>DATABASE:FindClient(ClientName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> ClientName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#client-class">CLIENT</a> The : found CLIENT.</li>
</ul>
<h3 id='database-addclient'>DATABASE:AddClient()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-findgroup-groupname'>DATABASE:FindGroup(GroupName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>String</u> GroupName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a> The : found GROUP.</li>
</ul>
<h3 id='database-addgroup'>DATABASE:AddGroup()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-addplayer'>DATABASE:AddPlayer()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-deleteplayer'>DATABASE:DeletePlayer()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-spawn-spawntemplate'>DATABASE:Spawn(SpawnTemplate)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>List[]</u> SpawnTemplate</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-setstatusgroup'>DATABASE.SetStatusGroup(()</h3>
<h4> Parameters </h4>

<h4> Returns </h4>
<h3 id='database-getstatusgroup'>DATABASE.GetStatusGroup(()</h3>
<h4> Parameters </h4>

<h4> Returns </h4>
<h3 id='database-getstaticunittemplate'>DATABASE:GetStaticUnitTemplate()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>
<h3 id='database-foreach-iteratorfunction'>DATABASE:ForEach(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called when there is an alive player in the database.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-foreachunit-iteratorfunction'>DATABASE:ForEachUnit(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a UNIT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-foreachgroup-iteratorfunction'>DATABASE:ForEachGroup(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a GROUP parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-foreachplayer-iteratorfunction'>DATABASE:ForEachPlayer(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept the player name.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-foreachplayerjoined-iteratorfunction'>DATABASE:ForEachPlayerJoined(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a UNIT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-foreachclient-iteratorfunction'>DATABASE:ForEachClient(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called object in the database. The function needs to accept a CLIENT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-foreachcargo-iteratorfunction'>DATABASE:ForEachCargo(IteratorFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><u>Function()</u> IteratorFunction : The function that will be called for each object in the database. The function needs to accept a CLIENT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
<h3 id='database-oneventnewcargo-eventdata'>DATABASE:OnEventNewCargo(EventData)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><a href="#eventdata-class">EVENTDATA</a> EventData</li>
</ul>

<h4> Returns </h4>
<h3 id='database-oneventdeletecargo-eventdata'>DATABASE:OnEventDeleteCargo(EventData)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li><a href="#eventdata-class">EVENTDATA</a> EventData</li>
</ul>

<h4> Returns </h4>
