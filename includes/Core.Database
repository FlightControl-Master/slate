<h1 id="core-database-module">Core.Database Module</h1>

<p>This module contains the DATABASE class, managing the database of mission objects.</p>

<h4>1) [DATABASE](#database-class) class, extends [BASE](#base-class)</h4>

<p>Mission designers can use the DATABASE class to refer to:</p>

<ul>
<li>UNITS</li>
<li>GROUPS</li>
<li>CLIENTS</li>
<li>AIRPORTS</li>
<li>PLAYERSJOINED</li>
<li>PLAYERS</li>
</ul>

<p>On top, for internal MOOSE administration purposes, the DATBASE administers the Unit and Group TEMPLATES as defined within the Mission Editor.</p>

<p>Moose will automatically create one instance of the DATABASE class into the <strong>global</strong> object _DATABASE.
Moose refers to _DATABASE within the framework extensively, but you can also refer to the _DATABASE object within your missions if required.</p>

<h4>1.1) DATABASE iterators</h4>

<p>You can iterate the database with the available iterator methods.
The iterator methods will walk the DATABASE set, and call for each element within the set a function that you provide.
The following iterator methods are currently available within the DATABASE:</p>

<ul>
<li><a href="#database-foreachunit-iteratorfunction">DATABASE:ForEachUnit()</a>: Calls a function for each <a href="#unit-module">UNIT</a> it finds within the DATABASE.</li>
<li><a href="#database-foreachgroup-iteratorfunction">DATABASE:ForEachGroup()</a>: Calls a function for each <a href="#group-module">GROUP</a> it finds within the DATABASE.</li>
<li><a href="#database-foreachplayer-iteratorfunction">DATABASE:ForEachPlayer()</a>: Calls a function for each alive player it finds within the DATABASE.</li>
<li><a href="#database-foreachplayerjoined-iteratorfunction">DATABASE:ForEachPlayerJoined()</a>: Calls a function for each joined player it finds within the DATABASE.</li>
<li><a href="#database-foreachclient-iteratorfunction">DATABASE:ForEachClient()</a>: Calls a function for each <a href="#client-module">CLIENT</a> it finds within the DATABASE.</li>
<li>DATABASE-ForEachClientAlive: Calls a function for each alive <a href="#client-module">CLIENT</a> it finds within the DATABASE.</li>
</ul>

<h2 id="database-class">DATABASE Class</h2>

<pre>
Inheritance : The DATABASE Class inherits from the following parents :
BASE
    `-- DATABASE
</pre>

<h3 id="database-new">DATABASE:New()</h3>
<pre class="highlight lua tab-lua"><code><span class="c1">-- Define a new DATABASE Object. This DBObject will contain a reference to all Group and Unit Templates defined within the ME and the DCSRTE.</span>
<span class="n">DBObject</span> <span class="o">=</span> <span class="n">DATABASE</span><span class="p">:</span><span class="n">New</span><span class="p">()</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-findunit-unitname">DATABASE:FindUnit(UnitName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>string UnitName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit%20the%20:%20found-class">UNIT The : found</a> Unit.</li>
</ul>

<h3 id="database-addunit">DATABASE:AddUnit()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-deleteunit">DATABASE:DeleteUnit()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-addstatic">DATABASE:AddStatic()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-deletestatic">DATABASE:DeleteStatic()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-findstatic-staticname">DATABASE:FindStatic(StaticName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>string StaticName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#static%20the%20:%20found-class">STATIC The : found</a> STATIC.</li>
</ul>

<h3 id="database-addairbase">DATABASE:AddAirbase()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-deleteairbase">DATABASE:DeleteAirbase()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-findairbase-airbasename">DATABASE:FindAirbase(AirbaseName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>string AirbaseName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#airbase%20the%20:%20found-class">AIRBASE The : found</a> AIRBASE.</li>
</ul>

<h3 id="database-findclient-clientname">DATABASE:FindClient(ClientName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>string ClientName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#client%20the%20:%20found-class">CLIENT The : found</a> CLIENT.</li>
</ul>

<h3 id="database-addclient">DATABASE:AddClient()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-findgroup-groupname">DATABASE:FindGroup(GroupName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>string GroupName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group%20the%20:%20found-class">GROUP The : found</a> GROUP.</li>
</ul>

<h3 id="database-addgroup">DATABASE:AddGroup()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-addplayer">DATABASE:AddPlayer()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-deleteplayer">DATABASE:DeletePlayer()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-spawn-spawntemplate">DATABASE:Spawn(SpawnTemplate)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>table[] SpawnTemplate</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-setstatusgroup">DATABASE.SetStatusGroup(()</h3>

<h4> Parameters </h4>

<h4> Returns </h4>

<h3 id="database-getstatusgroup">DATABASE.GetStatusGroup(()</h3>

<h4> Parameters </h4>

<h4> Returns </h4>

<h3 id="database-getstaticunittemplate">DATABASE:GetStaticUnitTemplate()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="database-foreach-iteratorfunction">DATABASE:ForEach(IteratorFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>#function IteratorFunction : The function that will be called when there is an alive player in the database.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-foreachunit-iteratorfunction">DATABASE:ForEachUnit(IteratorFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>#function IteratorFunction : The function that will be called when there is an alive UNIT in the database. The function needs to accept a UNIT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-foreachgroup-iteratorfunction">DATABASE:ForEachGroup(IteratorFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>#function IteratorFunction : The function that will be called when there is an alive GROUP in the database. The function needs to accept a GROUP parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-foreachplayer-iteratorfunction">DATABASE:ForEachPlayer(IteratorFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>#function IteratorFunction : The function that will be called when there is an player in the database. The function needs to accept the player name.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-foreachplayerjoined-iteratorfunction">DATABASE:ForEachPlayerJoined(IteratorFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>#function IteratorFunction : The function that will be called when there is was a player in the database. The function needs to accept a UNIT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>

<h3 id="database-foreachclient-iteratorfunction">DATABASE:ForEachClient(IteratorFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
<li>#function IteratorFunction : The function that will be called when there is an alive player in the database. The function needs to accept a CLIENT parameter.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#database-class">DATABASE</a>
self</li>
</ul>
