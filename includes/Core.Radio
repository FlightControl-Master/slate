<span id=core-radio-module></span><h1 id='core-radio-module-'>Core.Radio Module</h1>
<p><strong>Core</strong> - The RADIO class is responsible for <strong>transmitting radio communications</strong>.</p>

<p><img src="/includes/Pictures/RADIO/Dia1.JPG" alt="Banner Image" /></p>

<p>What are radio communications in DCS ?</p>

<ul>
<li>Radio transmissions consist of <strong>sound files</strong> that are broadcasted on a specific <strong>frequency</strong> (e.g. 115MHz) and <strong>modulation</strong> (e.g. AM),</li>
<li>They can be <strong>subtitled</strong> for a specific <strong>duration</strong>, the <strong>power</strong> in Watts of the transmiter&#39;s antenna can be set, and the transmission can be <strong>looped</strong>.</li>
</ul>

<p>How to supply DCS my own Sound Files ?</p>

<ul>
<li>Your sound files need to be encoded in <strong>.ogg</strong> or .wav,</li>
<li>Your sound files should be <strong>as tiny as possible</strong>. It is suggested you encode in .ogg with low bitrate and sampling settings,</li>
<li>They need to be added in .\l10n\DEFAULT\ in you .miz file (wich can be decompressed like a .zip file),</li>
<li>For simplicty sake, you can <strong>let DCS&#39; Mission Editor add the file</strong> itself, by creating a new Trigger with the action &quot;Sound to Country&quot;, and choosing your sound file and a country you don&#39;t use in your mission.</li>
</ul>

<p>Due to weird DCS quirks, <strong>radio communications behave differently</strong> if sent by a <a href="#unit-class">UNIT</a> or a <a href="#group-class">GROUP</a> or by any other <a href="#positionable-class">POSITIONABLE</a></p>

<ul>
<li>If the transmitter is a <a href="#unit-class">UNIT</a> or a <a href="#group-class">GROUP</a>, DCS will set the power of the transmission  automatically,</li>
<li>If the transmitter is any other <a href="#positionable-class">POSITIONABLE</a>, the transmisison can&#39;t be subtitled or looped.</li>
</ul>

<p>Note that obviously, the <strong>frequency</strong> and the <strong>modulation</strong> of the transmission are important only if the players are piloting an <strong>Advanced System Modelling</strong> enabled aircraft,
like the A10C or the Mirage 2000C. They will <strong>hear the transmission</strong> if they are tuned on the <strong>right frequency and modulation</strong> (and if they are close enough - more on that below).
If a FC3 airacraft is used, it will <strong>hear every communication, whatever the frequency and the modulation</strong> is set to.</p>
<span id=author-hugues-quot-grey_echo-quot-bousquet></span><h5 id='author-hugues-quot-grey_echo-quot-bousquet-'>Author: Hugues &quot;Grey_Echo&quot; Bousquet</h5><span id=radio-class></span><h2 id='radio-class-'>RADIO Class</h2>
<pre>
Inheritance : The RADIO Class inherits from the following parents :
BASE
    `-- RADIO
</pre>
<span id=1-1-radio-usage></span><h5 id='1-1-radio-usage-'>1.1) RADIO usage</h5>
<p>There are 3 steps to a successful radio transmission.</p>

<ul>
<li>First, you need to <strong>&quot;add a <a href="#radio-class">RADIO</a> object</strong> to your <a href="#positionable-class">POSITIONABLE</a>. This is done using the <a href="#positionable-getradio">POSITIONABLE:GetRadio()</a> function,</li>
<li>Then, you will <strong>set the relevant parameters</strong> to the transmission (see below),</li>
<li>When done, you can actually <strong>broadcast the transmission</strong> (i.e. play the sound) with the <a href="#broadcast-module">Broadcast</a>() function.</li>
</ul>

<p>Methods to set relevant parameters for both a <a href="#unit-class">UNIT</a> or a <a href="#group-class">GROUP</a> or any other <a href="#positionable-class">POSITIONABLE</a></p>

<ul>
<li><a href="#radio-setfilename-filename">RADIO:SetFileName()</a> : Sets the file name of your sound file (e.g. &quot;Noise.ogg&quot;),</li>
<li><a href="#radio-setfrequency-frequency">RADIO:SetFrequency()</a> : Sets the frequency of your transmission,</li>
<li><a href="#radio-setmodulation-modulation">RADIO:SetModulation()</a> : Sets the modulation of your transmission.</li>
</ul>

<p>Additional Methods to set relevant parameters if the transmiter is a <a href="#unit-class">UNIT</a> or a <a href="#group-class">GROUP</a></p>

<ul>
<li><a href="#radio-setloop-loop">RADIO:SetLoop()</a> : Choose if you want the transmission to be looped,</li>
<li><a href="#radio-setsubtitle-subtitle-subtitleduration">RADIO:SetSubtitle()</a> : Set both the subtitle and its duration,</li>
<li><a href="#radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop">RADIO:NewUnitTransmission()</a> : Shortcut to set all the relevant parameters in one method call</li>
</ul>

<p>Additional Methods to set relevant parameters if the transmiter is any other <a href="#positionable-class">POSITIONABLE</a></p>

<ul>
<li><a href="#radio-setpower-power">RADIO:SetPower()</a> : Sets the power of the antenna in Watts</li>
<li><a href="#radio-newgenerictransmission-filename-frequency-modulation-power">RADIO:NewGenericTransmission()</a> : Shortcut to set all the relevant parameters in one method call</li>
</ul>

<p>What is this power thing ?</p>

<ul>
<li>If your transmission is sent by a <a href="#positionable-class">POSITIONABLE</a> other than a <a href="#unit-class">UNIT</a> or a <a href="#group-class">GROUP</a>, you can set the power of the antenna,</li>
<li>Otherwise, DCS sets it automatically, depending on what&#39;s available on your Unit,</li>
<li>If the player gets <strong>too far</strong> from the transmiter, or if the antenna is <strong>too weak</strong>, the transmission will <strong>fade</strong> and <strong>become noisyer</strong>,</li>
<li>This an automated DCS calculation you have no say on,</li>
<li>For reference, a standard VOR station has a 100W antenna, a standard AA TACAN has a 120W antenna, and civilian ATC&#39;s antenna usually range between 300 and 500W,</li>
<li>Note that if the transmission has a subtitle, it will be readable, regardless of the quality of the transmission.</li>
</ul>

<h4> Attributes </h4>

<ul>
<li><a href="#positionable-class">POSITIONABLE</a> Positionable : The transmiter</li>
<li><u>String</u> FileName : Name of the sound file</li>
<li><u>Number</u> Frequency : Frequency of the transmission in Hz</li>
<li><u>Number</u> Modulation : Modulation of the transmission (either radio.modulation.AM or radio.modulation.FM)</li>
<li><u>String</u> Subtitle : Subtitle of the transmission</li>
<li><u>Number</u> SubtitleDuration : Duration of the Subtitle in seconds</li>
<li><u>Number</u> Power : Power of the antenna is Watts</li>
<li><u>Boolean</u> Loop</li>
</ul>
<span id=radio-new-positionable></span><h3 id='radio-new-positionable-'>RADIO:New(Positionable)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- If you want to create a RADIO, you probably should use [POSITIONABLE:GetRadio()](#positionable-getradio) instead</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><a href="#positionable-class">POSITIONABLE</a> Positionable : The <a href="#positionable-module">Positionable</a> that will receive radio capabilities.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
Radio</li>
<li><u>Nil</u> If : Positionable is invalid</li>
</ul>
<span id=radio-setfilename-filename></span><h3 id='radio-setfilename-filename-'>RADIO:SetFileName(FileName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>String</u> FileName : File name of the sound file (i.e. &quot;Noise.ogg&quot;)</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-setfrequency-frequency></span><h3 id='radio-setfrequency-frequency-'>RADIO:SetFrequency(Frequency)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>Number</u> Frequency : in MHz (Ranges allowed for radio transmissions in DCS : 30-88 / 108-152 / 225-400MHz)</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-setmodulation-modulation></span><h3 id='radio-setmodulation-modulation-'>RADIO:SetModulation(Modulation)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-setpower-power></span><h3 id='radio-setpower-power-'>RADIO:SetPower(Power)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>Number</u> Power : in W</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-setloop-loop></span><h3 id='radio-setloop-loop-'>RADIO:SetLoop(Loop)</h3><pre class="highlight lua tab-lua"><code></code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>Boolean</u> Loop</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-setsubtitle-subtitle-subtitleduration></span><h3 id='radio-setsubtitle-subtitle-subtitleduration-'>RADIO:SetSubtitle(Subtitle, SubtitleDuration)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Both parameters are mandatory, since it wouldn't make much sense to change the Subtitle and not its duration</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>String</u> Subtitle</li>
<li><u>Number</u> SubtitleDuration : in s</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-newgenerictransmission-filename-frequency-modulation-power></span><h3 id='radio-newgenerictransmission-filename-frequency-modulation-power-'>RADIO:NewGenericTransmission(FileName, Frequency, Modulation, Power)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- In this function the data is especially relevant if the broadcaster is anything but a UNIT or a GROUP,</span>
<span class="n">but</span> <span class="n">it</span> <span class="n">will</span> <span class="n">work</span> <span class="n">with</span> <span class="n">a</span> <span class="n">UNIT</span> <span class="ow">or</span> <span class="n">a</span> <span class="n">GROUP</span> <span class="n">anyway</span>
<span class="c1">-- Only the RADIO and the Filename are mandatory</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>String</u> FileName</li>
<li><u>Number</u> Frequency : in MHz</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
<li><u>Number</u> Power : in W</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop></span><h3 id='radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop-'>RADIO:NewUnitTransmission(FileName, Subtitle, SubtitleDuration, Frequency, Modulation, Loop)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- In this function the data is especially relevant if the broadcaster is a UNIT or a GROUP,</span>
<span class="n">but</span> <span class="n">it</span> <span class="n">will</span> <span class="n">work</span> <span class="k">for</span> <span class="n">any</span> <span class="n">POSITIONABLE</span>
<span class="c1">-- Only the RADIO and the Filename are mandatory</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
<li><u>String</u> FileName</li>
<li><u>String</u> Subtitle</li>
<li><u>Number</u> SubtitleDuration : in s</li>
<li><u>Number</u> Frequency : in MHz</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
<li><u>Boolean</u> Loop</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-broadcast></span><h3 id='radio-broadcast-'>RADIO:Broadcast()</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- The Radio has to be populated with the new transmission before broadcasting.</span>
<span class="c1">-- Please use RADIO setters or either [RADIO:NewGenericTransmission()](#radio-newgenerictransmission-filename-frequency-modulation-power) or [RADIO:NewUnitTransmission()](#radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop)</span>
<span class="c1">-- This class is in fact pretty smart, it determines the right DCS function to use depending on the type of POSITIONABLE</span>
<span class="c1">-- If the POSITIONABLE is not a UNIT or a GROUP, we use the generic (but limited) trigger.action.radioTransmission()</span>
<span class="c1">-- If the POSITIONABLE is a UNIT or a GROUP, we use the "TransmitMessage" Command</span>
<span class="c1">-- If your POSITIONABLE is a UNIT or a GROUP, the Power is ignored.</span>
<span class="c1">-- If your POSITIONABLE is not a UNIT or a GROUP, the Subtitle, SubtitleDuration and Loop are ignored</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
<span id=radio-stopbroadcast></span><h3 id='radio-stopbroadcast-'>RADIO:StopBroadcast()</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Especially usefull to stop the broadcast of looped transmissions</span>
<span class="c1">-- Only works with broadcasts from UNIT or GROUP</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class">RADIO</a>
self</li>
</ul>
