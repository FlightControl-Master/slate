<span id=core-radio-module></span><h1 id='core-radio-module-'>Core.Radio Module</h1>
<p><strong>Core</strong> - The RADIO Module is responsible for everything that is related to radio transmission and you can hear in DCS, be it TACAN beacons, Radio transmissions...</p>

<p><img src="/includes/Pictures/RADIO/Dia1.JPG" alt="Banner Image" /></p>

<p>The Radio contains 2 classes : RADIO and BEACON</p>

<p>What are radio communications in DCS ?</p>

<ul>
<li>Radio transmissions consist of <strong>sound files</strong> that are broadcasted on a specific <strong>frequency</strong> (e.g. 115MHz) and <strong>modulation</strong> (e.g. AM),</li>
<li>They can be <strong>subtitled</strong> for a specific <strong>duration</strong>, the <strong>power</strong> in Watts of the transmiter&#39;s antenna can be set, and the transmission can be <strong>looped</strong>.</li>
</ul>

<p>How to supply DCS my own Sound Files ?</p>

<ul>
<li>Your sound files need to be encoded in <strong>.ogg</strong> or .wav,</li>
<li>Your sound files should be <strong>as tiny as possible</strong>. It is suggested you encode in .ogg with low bitrate and sampling settings,</li>
<li>They need to be added in .\l10n\DEFAULT\ in you .miz file (wich can be decompressed like a .zip file),</li>
<li>For simplicty sake, you can <strong>let DCS&#39; Mission Editor add the file</strong> itself, by creating a new Trigger with the action &quot;Sound to Country&quot;, and choosing your sound file and a country you don&#39;t use in your mission.</li>
</ul>

<p>Due to weird DCS quirks, <strong>radio communications behave differently</strong> if sent by a <a href="#unit-class-">UNIT</a> or a <a href="#group-class-">GROUP</a> or by any other <a href="#positionable-class-">POSITIONABLE</a></p>

<ul>
<li>If the transmitter is a <a href="#unit-class-">UNIT</a> or a <a href="#group-class-">GROUP</a>, DCS will set the power of the transmission  automatically,</li>
<li>If the transmitter is any other <a href="#positionable-class-">POSITIONABLE</a>, the transmisison can&#39;t be subtitled or looped.</li>
</ul>

<p>Note that obviously, the <strong>frequency</strong> and the <strong>modulation</strong> of the transmission are important only if the players are piloting an <strong>Advanced System Modelling</strong> enabled aircraft,
like the A10C or the Mirage 2000C. They will <strong>hear the transmission</strong> if they are tuned on the <strong>right frequency and modulation</strong> (and if they are close enough - more on that below).
If a FC3 airacraft is used, it will <strong>hear every communication, whatever the frequency and the modulation</strong> is set to. The same is true for TACAN beacons. If your aircaft isn&#39;t compatible,
you won&#39;t hear/be able to use the TACAN beacon informations.</p>
<span id=author-hugues-quot-grey_echo-quot-bousquet></span><h5 id='author-hugues-quot-grey_echo-quot-bousquet-'>Author: Hugues &quot;Grey_Echo&quot; Bousquet</h5><span id=radio-class></span><h2 id='radio-class-'>RADIO Class</h2>
<pre>
Inheritance : The RADIO Class inherits from the following parents :
BASE
    `-- RADIO
</pre>
<span id=radio-usage></span><h5 id='radio-usage-'>RADIO usage</h5>
<p>There are 3 steps to a successful radio transmission.</p>

<ul>
<li>First, you need to <strong>&quot;add a <a href="#radio-class-">RADIO</a> object</strong> to your <a href="#positionable-class-">POSITIONABLE</a>. This is done using the POSITIONABLE-GetRadio- function,</li>
<li>Then, you will <strong>set the relevant parameters</strong> to the transmission (see below),</li>
<li>When done, you can actually <strong>broadcast the transmission</strong> (i.e. play the sound) with the <a href="#broadcast-module-">Broadcast</a>() function.</li>
</ul>

<p>Methods to set relevant parameters for both a <a href="#unit-class-">UNIT</a> or a <a href="#group-class-">GROUP</a> or any other <a href="#positionable-class-">POSITIONABLE</a></p>

<ul>
<li><a href="#radio-setfilename-filename">RADIO:SetFileName()</a> : Sets the file name of your sound file (e.g. &quot;Noise.ogg&quot;),</li>
<li><a href="#radio-setfrequency-frequency">RADIO:SetFrequency()</a> : Sets the frequency of your transmission.</li>
<li><a href="#radio-setmodulation-modulation">RADIO:SetModulation()</a> : Sets the modulation of your transmission.</li>
<li><a href="#radio-setloop-loop">RADIO:SetLoop()</a> : Choose if you want the transmission to be looped. If you need your transmission to be looped, you might need a <a href="#beacon-class-">BEACON</a> instead...</li>
</ul>

<p>Additional Methods to set relevant parameters if the transmiter is a <a href="#unit-class-">UNIT</a> or a <a href="#group-class-">GROUP</a></p>

<ul>
<li><a href="#radio-setsubtitle-subtitle-subtitleduration">RADIO:SetSubtitle()</a> : Set both the subtitle and its duration,</li>
<li><a href="#radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop">RADIO:NewUnitTransmission()</a> : Shortcut to set all the relevant parameters in one method call</li>
</ul>

<p>Additional Methods to set relevant parameters if the transmiter is any other <a href="#positionable-class-">POSITIONABLE</a></p>

<ul>
<li><a href="#radio-setpower-power">RADIO:SetPower()</a> : Sets the power of the antenna in Watts</li>
<li><a href="#radio-newgenerictransmission-filename-frequency-modulation-power">RADIO:NewGenericTransmission()</a> : Shortcut to set all the relevant parameters in one method call</li>
</ul>

<p>What is this power thing ?</p>

<ul>
<li>If your transmission is sent by a <a href="#positionable-class-">POSITIONABLE</a> other than a <a href="#unit-class-">UNIT</a> or a <a href="#group-class-">GROUP</a>, you can set the power of the antenna,</li>
<li>Otherwise, DCS sets it automatically, depending on what&#39;s available on your Unit,</li>
<li>If the player gets <strong>too far</strong> from the transmiter, or if the antenna is <strong>too weak</strong>, the transmission will <strong>fade</strong> and <strong>become noisyer</strong>,</li>
<li>This an automated DCS calculation you have no say on,</li>
<li>For reference, a standard VOR station has a 100W antenna, a standard AA TACAN has a 120W antenna, and civilian ATC&#39;s antenna usually range between 300 and 500W,</li>
<li>Note that if the transmission has a subtitle, it will be readable, regardless of the quality of the transmission.</li>
</ul>

<h4> Attributes </h4>

<ul>
<li><a href="#positionable-class-">POSITIONABLE</a> Positionable : The transmiter</li>
<li><u>String</u> FileName : Name of the sound file</li>
<li><u>Number</u> Frequency : Frequency of the transmission in Hz</li>
<li><u>Number</u> Modulation : Modulation of the transmission (either radio.modulation.AM or radio.modulation.FM)</li>
<li><u>String</u> Subtitle : Subtitle of the transmission</li>
<li><u>Number</u> SubtitleDuration : Duration of the Subtitle in seconds</li>
<li><u>Number</u> Power : Power of the antenna is Watts</li>
<li><u>Boolean</u> Loop</li>
</ul>
<span id=radio-new-positionable></span><h3 id='radio-new-positionable-'>RADIO:New(Positionable)</h3>
<p>Create a new RADIO Object. This doesn&#39;t broadcast a transmission, though, use RADIO-Broadcast- to actually broadcast
If you want to create a RADIO, you probably should use POSITIONABLE-GetRadio- instead</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><a href="#positionable-class-">POSITIONABLE</a> Positionable : The <a href="#positionable-module-">Positionable</a> that will receive radio capabilities.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><p><a href="#radio-class-">RADIO</a></p></li>
<li><p><u>Nil</u>  If Positionable is invalid</p></li>
</ul>
<span id=radio-setfilename-filename></span><h3 id='radio-setfilename-filename-'>RADIO:SetFileName(FileName)</h3>
<p>Check validity of the filename passed and sets RADIO.FileName</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>String</u> FileName : File name of the sound file (i.e. &quot;Noise.ogg&quot;)</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-setfrequency-frequency></span><h3 id='radio-setfrequency-frequency-'>RADIO:SetFrequency(Frequency)</h3>
<p>Check validity of the frequency passed and sets RADIO.Frequency</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>Number</u> Frequency : in MHz (Ranges allowed for radio transmissions in DCS : 30-88 / 108-152 / 225-400MHz)</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-setmodulation-modulation></span><h3 id='radio-setmodulation-modulation-'>RADIO:SetModulation(Modulation)</h3>
<p>Check validity of the frequency passed and sets RADIO.Modulation</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-setpower-power></span><h3 id='radio-setpower-power-'>RADIO:SetPower(Power)</h3>
<p>Check validity of the power passed and sets RADIO.Power</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>Number</u> Power : in W</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-setloop-loop></span><h3 id='radio-setloop-loop-'>RADIO:SetLoop(Loop)</h3><pre class="highlight lua tab-lua"><code></code></pre>
<p>Check validity of the loop passed and sets RADIO.Loop</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>Boolean</u> Loop</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-setsubtitle-subtitle-subtitleduration></span><h3 id='radio-setsubtitle-subtitle-subtitleduration-'>RADIO:SetSubtitle(Subtitle, SubtitleDuration)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- create the broadcaster and attaches it a RADIO</span>
<span class="kd">local</span> <span class="n">MyUnit</span> <span class="o">=</span> <span class="n">UNIT</span><span class="p">:</span><span class="n">FindByName</span><span class="p">(</span><span class="s2">"MyUnit"</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">MyUnitRadio</span> <span class="o">=</span> <span class="n">MyUnit</span><span class="p">:</span><span class="n">GetRadio</span><span class="p">()</span>

<span class="c1">-- add a subtitle for the next transmission, which will be up for 10s</span>
<span class="n">MyUnitRadio</span><span class="p">:</span><span class="n">SetSubtitle</span><span class="p">(</span><span class="s2">"My Subtitle, 10)
</span></code></pre>
<p>Check validity of the subtitle and the subtitleDuration  passed and sets RADIO.subtitle and RADIO.subtitleDuration
Both parameters are mandatory, since it wouldn&#39;t make much sense to change the Subtitle and not its duration</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>String</u> Subtitle</li>
<li><u>Number</u> SubtitleDuration : in s</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-newgenerictransmission-filename-frequency-modulation-power></span><h3 id='radio-newgenerictransmission-filename-frequency-modulation-power-'>RADIO:NewGenericTransmission(FileName, Frequency, Modulation, Power)</h3>
<p>Create a new transmission, that is to say, populate the RADIO with relevant data
In this function the data is especially relevant if the broadcaster is anything but a UNIT or a GROUP,
but it will work with a UNIT or a GROUP anyway.
Only the <a href="#radio-class-">RADIO</a>
and the Filename are mandatory</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>String</u> FileName</li>
<li><u>Number</u> Frequency : in MHz</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
<li><u>Number</u> Power : in W</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop></span><h3 id='radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop-'>RADIO:NewUnitTransmission(FileName, Subtitle, SubtitleDuration, Frequency, Modulation, Loop)</h3>
<p>Create a new transmission, that is to say, populate the RADIO with relevant data
In this function the data is especially relevant if the broadcaster is a UNIT or a GROUP,
but it will work for any <a href="#positionable-class-">POSITIONABLE</a>.
Only the RADIO and the Filename are mandatory.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
<li><u>String</u> FileName</li>
<li><u>String</u> Subtitle</li>
<li><u>Number</u> SubtitleDuration : in s</li>
<li><u>Number</u> Frequency : in MHz</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
<li><u>Boolean</u> Loop</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-broadcast></span><h3 id='radio-broadcast-'>RADIO:Broadcast()</h3>
<p>Actually Broadcast the transmission
* The Radio has to be populated with the new transmission before broadcasting.
* Please use RADIO setters or either <a href="#radio-newgenerictransmission-filename-frequency-modulation-power">RADIO:NewGenericTransmission()</a> or <a href="#radio-newunittransmission-filename-subtitle-subtitleduration-frequency-modulation-loop">RADIO:NewUnitTransmission()</a>
* This class is in fact pretty smart, it determines the right DCS function to use depending on the type of POSITIONABLE
* If the POSITIONABLE is not a UNIT or a GROUP, we use the generic (but limited) trigger.action.radioTransmission()
* If the POSITIONABLE is a UNIT or a GROUP, we use the &quot;TransmitMessage&quot; Command
* If your POSITIONABLE is a UNIT or a GROUP, the Power is ignored.
* If your POSITIONABLE is not a UNIT or a GROUP, the Subtitle, SubtitleDuration are ignored</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=radio-stopbroadcast></span><h3 id='radio-stopbroadcast-'>RADIO:StopBroadcast()</h3>
<p>Stops a transmission
This function is especially usefull to stop the broadcast of looped transmissions</p>

<h4> Parameters </h4>

<ul>
<li><a href="#radio-class-">RADIO</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#radio-class-">RADIO</a></li>
</ul>
<span id=beacon-class></span><h2 id='beacon-class-'>BEACON Class</h2>
<pre>
Inheritance : The BEACON Class inherits from the following parents :
BASE
    `-- BEACON
</pre>

<p>After attaching a <a href="#beacon-class-">BEACON</a> to your <a href="#positionable-class-">POSITIONABLE</a>, you need to select the right function to activate the kind of beacon you want.
There are two types of BEACONs available : the AA TACAN Beacon and the general purpose Radio Beacon.
Note that in both case, you can set an optional parameter : the <code>BeaconDuration</code>. This can be very usefull to simulate the battery time if your BEACON is
attach to a cargo crate, for exemple.</p>
<span id=aa-tacan-beacon-usage></span><h5 id='aa-tacan-beacon-usage-'>AA TACAN Beacon usage</h5>
<p>This beacon only works with airborne <a href="#unit-class-">UNIT</a> or a <a href="#group-class-">GROUP</a>. Use <a href="#beacon-aatacan-tacanchannel-message-bearing-beaconduration">BEACON:AATACAN()</a> to set the beacon parameters and start the beacon.
Use @#BEACON:StopAATACAN}() to stop it.</p>
<span id=general-purpose-radio-beacon-usage></span><h5 id='general-purpose-radio-beacon-usage-'>General Purpose Radio Beacon usage</h5>
<p>This beacon will work with any <a href="#positionable-class-">POSITIONABLE</a>, but <strong>it won&#39;t follow the <a href="#positionable-class-">POSITIONABLE</a></strong> ! This means that you should only use it with
<a href="#positionable-class-">POSITIONABLE</a> that don&#39;t move, or move very slowly. Use <a href="#beacon-radiobeacon-filename-frequency-modulation-power-beaconduration">BEACON:RadioBeacon()</a> to set the beacon parameters and start the beacon.
Use BEACON-StopRadioBeacon- to stop it.</p>
<span id=beacon-new-positionable></span><h3 id='beacon-new-positionable-'>BEACON:New(Positionable)</h3>
<p>Create a new BEACON Object. This doesn&#39;t activate the beacon, though, use <a href="#beacon-aatacan-tacanchannel-message-bearing-beaconduration">BEACON:AATACAN()</a> or BEACON-Generic-
If you want to create a BEACON, you probably should use POSITIONABLE-GetBeacon- instead.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a>
self</li>
<li><a href="#positionable-class-">POSITIONABLE</a> Positionable : The <a href="#positionable-module-">Positionable</a> that will receive radio capabilities.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><p><a href="#beacon-class-">BEACON</a></p></li>
<li><p><u>Nil</u>  If Positionable is invalid</p></li>
</ul>
<span id=beacon-aatacan-tacanchannel-message-bearing-beaconduration></span><h3 id='beacon-aatacan-tacanchannel-message-bearing-beaconduration-'>BEACON:AATACAN(TACANChannel, Message, Bearing, BeaconDuration)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Let's create a TACAN Beacon for a tanker</span>
<span class="kd">local</span> <span class="n">myUnit</span> <span class="o">=</span> <span class="n">UNIT</span><span class="p">:</span><span class="n">FindByName</span><span class="p">(</span><span class="s2">"MyUnit"</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">myBeacon</span> <span class="o">=</span> <span class="n">myUnit</span><span class="p">:</span><span class="n">GetBeacon</span><span class="p">()</span> <span class="c1">-- Creates the beacon</span>

<span class="n">myBeacon</span><span class="p">:</span><span class="n">AATACAN</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="s2">"TEXACO"</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">-- Activate the beacon</span>
</code></pre>
<p>Activates a TACAN BEACON on an Aircraft.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a>
self</li>
<li><u>Number</u> TACANChannel : (the &quot;10&quot; part in &quot;10Y&quot;). Note that AA TACAN are only available on Y Channels</li>
<li><u>String</u> Message : The Message that is going to be coded in Morse and broadcasted by the beacon</li>
<li><u>Boolean</u> Bearing : Can the BEACON be homed on ?</li>
<li><u>Number</u> BeaconDuration : How long will the beacon last in seconds. Omit for forever.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a></li>
</ul>
<span id=beacon-stopaatacan></span><h3 id='beacon-stopaatacan-'>BEACON:StopAATACAN()</h3>
<p>Stops the AA TACAN BEACON</p>

<h4> Parameters </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a></li>
</ul>
<span id=beacon-radiobeacon-filename-frequency-modulation-power-beaconduration></span><h3 id='beacon-radiobeacon-filename-frequency-modulation-power-beaconduration-'>BEACON:RadioBeacon(FileName, Frequency, Modulation, Power, BeaconDuration)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Let's create a beacon for a unit in distress.</span>
<span class="c1">-- Frequency will be 40MHz FM (home-able by a Huey's AN/ARC-131)</span>
<span class="c1">-- The beacon they use is battery-powered, and only lasts for 5 min</span>
<span class="kd">local</span> <span class="n">UnitInDistress</span> <span class="o">=</span> <span class="n">UNIT</span><span class="p">:</span><span class="n">FindByName</span><span class="p">(</span><span class="s2">"Unit1"</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">UnitBeacon</span> <span class="o">=</span> <span class="n">UnitInDistress</span><span class="p">:</span><span class="n">GetBeacon</span><span class="p">()</span>

<span class="c1">-- Set the beacon and start it</span>
<span class="n">UnitBeacon</span><span class="p">:</span><span class="n">RadioBeacon</span><span class="p">(</span><span class="s2">"MySoundFileSOS.ogg"</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">radio</span><span class="p">.</span><span class="n">modulation</span><span class="p">.</span><span class="n">FM</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">5</span><span class="o">*</span><span class="mi">60</span><span class="p">)</span>
</code></pre>
<p>Activates a general pupose Radio Beacon
This uses the very generic singleton function &quot;trigger.action.radioTransmission()&quot; provided by DCS to broadcast a sound file on a specific frequency.
Although any frequency could be used, only 2 DCS Modules can home on radio beacons at the time of writing : the Huey and the Mi-8.
They can home in on these specific frequencies :</p>

<ul>
<li><strong>Mi8</strong></li>
<li>R-828 -&gt; 20-60MHz</li>
<li>ARKUD -&gt; 100-150MHz (canal 1 : 114166, canal 2 : 114333, canal 3 : 114583, canal 4 : 121500, canal 5 : 123100, canal 6 : 124100) AM</li>
<li>ARK9 -&gt; 150-1300KHz</li>
<li><strong>Huey</strong></li>
<li>AN/ARC-131 -&gt; 30-76 Mhz FM</li>
</ul>

<h4> Parameters </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a>
self</li>
<li><u>String</u> FileName : The name of the audio file</li>
<li><u>Number</u> Frequency : in MHz</li>
<li><u>Number</u> Modulation : either radio.modulation.AM or radio.modulation.FM</li>
<li><u>Number</u> Power : in W</li>
<li><u>Number</u> BeaconDuration : How long will the beacon last in seconds. Omit for forever.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a></li>
</ul>
<span id=beacon-stopradiobeacon></span><h3 id='beacon-stopradiobeacon-'>BEACON:StopRadioBeacon()</h3>
<p>Stops the AA TACAN BEACON</p>

<h4> Parameters </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#beacon-class-">BEACON</a></li>
</ul>
