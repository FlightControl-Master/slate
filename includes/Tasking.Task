<span id=tasking-task-module></span><h1 id='tasking-task-module-'>Tasking.Task Module</h1>
<p><strong>Tasking</strong> -- This module contains the TASK class.</p>
<span id=authors-flightcontrol-design-and-programming></span><h5 id='authors-flightcontrol-design-and-programming-'>Authors: FlightControl - Design and Programming</h5><span id=task-class></span><h2 id='task-class-'>TASK Class</h2>
<pre>
Inheritance : The TASK Class inherits from the following parents :
BASE
    `-- FSM
        `-- FSM_TASK
            `-- TASK
</pre>

<h4> Attributes </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a> TaskScheduler</li>
<li><a href="#mission-class-">MISSION</a> Mission</li>
<li><a href="#set_group-class-">SET_GROUP</a> SetGroup : The Set of Groups assigned to the Task</li>
<li><a href="#fsm_process-class-">FSM_PROCESS</a> FsmTemplate</li>
<li><a href="#mission-class-">MISSION</a> Mission</li>
<li><a href="#commandcenter-class-">COMMANDCENTER</a> CommandCenter</li>
</ul>
<span id=task-onafterplayeraborted-playerunit-playername></span><h3 id='task-onafterplayeraborted-playerunit-playername-'>TASK:OnAfterPlayerAborted(PlayerUnit, PlayerName)</h3>
<p>FSM PlayerAborted event handler prototype for TASK.
@function [parent=#TASK] OnAfterPlayerAborted</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> PlayerUnit : The Unit of the Player when he went back to spectators or left the mission.</li>
<li><u>String</u> PlayerName : The name of the Player.</li>
</ul>

<h4> Returns </h4>
<span id=task-onafterplayercrashed-playerunit-playername></span><h3 id='task-onafterplayercrashed-playerunit-playername-'>TASK:OnAfterPlayerCrashed(PlayerUnit, PlayerName)</h3>
<p>FSM PlayerCrashed event handler prototype for TASK.
@function [parent=#TASK] OnAfterPlayerCrashed</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> PlayerUnit : The Unit of the Player when he crashed in the mission.</li>
<li><u>String</u> PlayerName : The name of the Player.</li>
</ul>

<h4> Returns </h4>
<span id=task-onafterplayerdead-playerunit-playername></span><h3 id='task-onafterplayerdead-playerunit-playername-'>TASK:OnAfterPlayerDead(PlayerUnit, PlayerName)</h3>
<p>FSM PlayerDead event handler prototype for TASK.
@function [parent=#TASK] OnAfterPlayerDead</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> PlayerUnit : The Unit of the Player when he died in the mission.</li>
<li><u>String</u> PlayerName : The name of the Player.</li>
</ul>

<h4> Returns </h4>
<span id=task-fail></span><h3 id='task-fail-'>TASK:Fail()</h3>
<p>FSM Fail synchronous event function for TASK.
Use this event to Fail the Task.
@function [parent=#TASK] Fail</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-abort></span><h3 id='task-abort-'>TASK:Abort()</h3>
<p>FSM Abort synchronous event function for TASK.
Use this event to Abort the Task.
@function [parent=#TASK] Abort</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-success></span><h3 id='task-success-'>TASK:Success()</h3>
<p>FSM Success synchronous event function for TASK.
Use this event to make the Task a Success.
@function [parent=#TASK] Success</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-cancel></span><h3 id='task-cancel-'>TASK:Cancel()</h3>
<p>FSM Cancel synchronous event function for TASK.
Use this event to Cancel the Task.
@function [parent=#TASK] Cancel</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-replan></span><h3 id='task-replan-'>TASK:Replan()</h3>
<p>FSM Replan synchronous event function for TASK.
Use this event to Replan the Task.
@function [parent=#TASK] Replan</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-new-mission-setgroupassign-taskname-tasktype></span><h3 id='task-new-mission-setgroupassign-taskname-tasktype-'>TASK:New(Mission, SetGroupAssign, TaskName, TaskType)</h3>
<p>Instantiates a new TASK. Should never be used. Interface Class.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#mission-class-">MISSION</a> Mission : The mission wherein the Task is registered.</li>
<li><a href="#set_group-class-">SET_GROUP</a> SetGroupAssign : The set of groups for which the Task can be assigned.</li>
<li><u>String</u> TaskName : The name of the Task</li>
<li><u>String</u> TaskType : The type of the Task</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-getunitprocess></span><h3 id='task-getunitprocess-'>TASK:GetUnitProcess()</h3>
<p>Get the Task FSM Process Template</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#fsm_process-class-">FSM_PROCESS</a> </li>
</ul>
<span id=task-setunitprocess-self></span><h3 id='task-setunitprocess-self-'>TASK:SetUnitProcess(self)</h3>
<p>Sets the Task FSM Process Template</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#fsm_process-class-">FSM_PROCESS</a> self</li>
</ul>

<h4> Returns </h4>
<span id=task-joinunit-playerunit-playergroup></span><h3 id='task-joinunit-playerunit-playergroup-'>TASK:JoinUnit(PlayerUnit, PlayerGroup)</h3>
<p>Add a PlayerUnit to join the Task.
For each Group within the Task, the Unit is checked if it can join the Task.
If the Unit was not part of the Task, false is returned.
If the Unit is part of the Task, true is returned.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> PlayerUnit : The CLIENT or UNIT of the Player joining the Mission.</li>
<li><a href="#group-class-">GROUP</a> PlayerGroup : The GROUP of the player joining the Mission.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u>  true if Unit is part of the Task.</li>
</ul>
<span id=task-abortunit-playerunit></span><h3 id='task-abortunit-playerunit-'>TASK:AbortUnit(PlayerUnit)</h3>
<p>Abort a PlayerUnit from a Task.
If the Unit was not part of the Task, false is returned.
If the Unit is part of the Task, true is returned.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> PlayerUnit : The CLIENT or UNIT of the Player aborting the Task.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u>  true if Unit is part of the Task.</li>
</ul>
<span id=task-crashunit-playerunit></span><h3 id='task-crashunit-playerunit-'>TASK:CrashUnit(PlayerUnit)</h3>
<p>A PlayerUnit crashed in a Task. Abort the Player.
If the Unit was not part of the Task, false is returned.
If the Unit is part of the Task, true is returned.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> PlayerUnit : The CLIENT or UNIT of the Player aborting the Task.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u>  true if Unit is part of the Task.</li>
</ul>
<span id=task-getmission></span><h3 id='task-getmission-'>TASK:GetMission()</h3>
<p>Gets the Mission to where the TASK belongs.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#mission-class-">MISSION</a> </li>
</ul>
<span id=task-getgroups></span><h3 id='task-getgroups-'>TASK:GetGroups()</h3>
<p>Gets the SET_GROUP assigned to the TASK.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#set_group-class-">SET_GROUP</a> </li>
</ul>
<span id=task-assigntogroup-taskgroup></span><h3 id='task-assigntogroup-taskgroup-'>TASK:AssignToGroup(TaskGroup)</h3>
<p>Assign the <a href="#task-module-">Task</a> to a <a href="#group-module-">Group</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> TaskGroup</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-hasgroup-findgroup></span><h3 id='task-hasgroup-findgroup-'>TASK:HasGroup(FindGroup)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> FindGroup</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> </li>
</ul>
<span id=task-assigntounit-taskunit></span><h3 id='task-assigntounit-taskunit-'>TASK:AssignToUnit(TaskUnit)</h3>
<p>Assign the <a href="#task-module-">Task</a> to an alive <a href="#unit-module-">Unit</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> TaskUnit</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-unassignfromunit-taskunit></span><h3 id='task-unassignfromunit-taskunit-'>TASK:UnAssignFromUnit(TaskUnit)</h3>
<p>UnAssign the <a href="#task-module-">Task</a> from an alive <a href="#unit-module-">Unit</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> TaskUnit</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-settimeout-timer></span><h3 id='task-settimeout-timer-'>TASK:SetTimeOut (Timer)</h3>
<p>Sets the TimeOut for the <a href="#task-module-">Task</a>. If <a href="#task-module-">Task</a> stayed planned for longer than TimeOut, it gets into Cancelled status.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li>#integer Timer : in seconds</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-messagetogroups></span><h3 id='task-messagetogroups-'>TASK:MessageToGroups()</h3>
<p>Send a message of the <a href="#task-module-">Task</a> to the assigned <a href="#group-module-">Group</a>s.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-sendbriefingtoassignedgroups></span><h3 id='task-sendbriefingtoassignedgroups-'>TASK:SendBriefingToAssignedGroups()</h3>
<p>Send the briefng message of the <a href="#task-module-">Task</a> to the assigned <a href="#group-module-">Group</a>s.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-unassignfromgroups></span><h3 id='task-unassignfromgroups-'>TASK:UnAssignFromGroups()</h3>
<p>UnAssign the <a href="#task-module-">Task</a> from the <a href="#group-module-">Group</a>s.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-unassignfromgroup></span><h3 id='task-unassignfromgroup-'>TASK:UnAssignFromGroup()</h3>
<p>UnAssign the <a href="#task-module-">Task</a> from a <a href="#group-module-">Group</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isassignedtogroup-taskgroup></span><h3 id='task-isassignedtogroup-taskgroup-'>TASK:IsAssignedToGroup(TaskGroup)</h3>
<p>Returns if the <a href="#task-module-">Task</a> is assigned to the Group.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> TaskGroup</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> </li>
</ul>
<span id=task-hasaliveunits></span><h3 id='task-hasaliveunits-'>TASK:HasAliveUnits()</h3>
<p>Returns if the <a href="#task-module-">Task</a> has still alive and assigned Units.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> </li>
</ul>
<span id=task-setmenuforgroup-menutime></span><h3 id='task-setmenuforgroup-menutime-'>TASK:SetMenuForGroup(MenuTime)</h3>
<p>Set the Menu for a Group</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>Number</u> MenuTime</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-setplannedmenuforgroup-taskgroup-menutext-menutime></span><h3 id='task-setplannedmenuforgroup-taskgroup-menutext-menutime-'>TASK:SetPlannedMenuForGroup(TaskGroup, MenuText, MenuTime)</h3>
<p>Set the planned menu option of the <a href="#task-module-">Task</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> TaskGroup</li>
<li><u>String</u> MenuText : The menu text.</li>
<li><u>Number</u> MenuTime</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-setassignedmenuforgroup-taskgroup-menutime></span><h3 id='task-setassignedmenuforgroup-taskgroup-menutime-'>TASK:SetAssignedMenuForGroup(TaskGroup, MenuTime)</h3>
<p>Set the assigned menu options of the <a href="#task-module-">Task</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> TaskGroup</li>
<li><u>Number</u> MenuTime</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-removemenu-menutime></span><h3 id='task-removemenu-menutime-'>TASK:RemoveMenu(MenuTime)</h3>
<p>Remove the menu options of the <a href="#task-module-">Task</a> to all the groups in the SetGroup.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>Number</u> MenuTime</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-removeplannedmenuforgroup-taskgroup-menutime></span><h3 id='task-removeplannedmenuforgroup-taskgroup-menutime-'>TASK:RemovePlannedMenuForGroup(TaskGroup, MenuTime)</h3>
<p>Remove the menu option of the <a href="#task-module-">Task</a> for a <a href="#group-module-">Group</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> TaskGroup</li>
<li><u>Number</u> MenuTime</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-removeassignedmenuforgroup-taskgroup-menutime></span><h3 id='task-removeassignedmenuforgroup-taskgroup-menutime-'>TASK:RemoveAssignedMenuForGroup(TaskGroup, MenuTime)</h3>
<p>Remove the assigned menu option of the <a href="#task-module-">Task</a> for a <a href="#group-module-">Group</a>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#group-class-">GROUP</a> TaskGroup</li>
<li><u>Number</u> MenuTime</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-menutaskstatus></span><h3 id='task-menutaskstatus-'>TASK:MenuTaskStatus()</h3>
<p>Report the task status.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-menutaskabort></span><h3 id='task-menutaskabort-'>TASK:MenuTaskAbort()</h3>
<p>Report the task status.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-gettaskname></span><h3 id='task-gettaskname-'>TASK:GetTaskName()</h3>
<p>Returns the <a href="#task-module-">Task</a> name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> </li>
</ul>
<span id=task-getprocesstemplate-processname></span><h3 id='task-getprocesstemplate-processname-'>TASK:GetProcessTemplate(ProcessName)</h3>
<p>Get the default or currently assigned <a href="#process-module-">Process</a> template with key ProcessName.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> ProcessName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#fsm_process-class-">FSM_PROCESS</a> </li>
</ul>
<span id=task-failprocesses-taskunitname></span><h3 id='task-failprocesses-taskunitname-'>TASK:FailProcesses(TaskUnitName)</h3>
<p>Fail processes from <a href="#task-module-">Task</a> with key <a href="#unit-module-">Unit</a></p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> TaskUnitName</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-setstatemachine-taskunit-fsm></span><h3 id='task-setstatemachine-taskunit-fsm-'>TASK:SetStateMachine(TaskUnit, Fsm)</h3>
<p>Add a FiniteStateMachine to <a href="#task-module-">Task</a> with key Task<a href="#unit-module-">Unit</a></p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> TaskUnit</li>
<li><a href="#fsm_process-class-">FSM_PROCESS</a> Fsm</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-getstatemachine-taskunit></span><h3 id='task-getstatemachine-taskunit-'>TASK:GetStateMachine(TaskUnit)</h3>
<p>Gets the FiniteStateMachine of <a href="#task-module-">Task</a> with key Task<a href="#unit-module-">Unit</a></p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> TaskUnit</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#fsm_process-class-">FSM_PROCESS</a> </li>
</ul>
<span id=task-removestatemachine-taskunit></span><h3 id='task-removestatemachine-taskunit-'>TASK:RemoveStateMachine(TaskUnit)</h3>
<p>Remove FiniteStateMachines from <a href="#task-module-">Task</a> with key Task<a href="#unit-module-">Unit</a></p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> TaskUnit</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-hasstatemachine-taskunit></span><h3 id='task-hasstatemachine-taskunit-'>TASK:HasStateMachine(TaskUnit)</h3>
<p>Checks if there is a FiniteStateMachine assigned to Task<a href="#unit-module-">Unit</a> for <a href="#task-module-">Task</a></p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#unit-class-">UNIT</a> TaskUnit</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-getscoring></span><h3 id='task-getscoring-'>TASK:GetScoring()</h3>
<p>Gets the Scoring of the task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#scoring-class-">SCORING</a> </li>
</ul>
<span id=task-gettaskindex></span><h3 id='task-gettaskindex-'>TASK:GetTaskIndex()</h3>
<p>Gets the Task Index, which is a combination of the Task type, the Task name.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u>  The Task ID</li>
</ul>
<span id=task-setname-taskname></span><h3 id='task-setname-taskname-'>TASK:SetName(TaskName)</h3>
<p>Sets the Name of the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> TaskName</li>
</ul>

<h4> Returns </h4>
<span id=task-getname></span><h3 id='task-getname-'>TASK:GetName()</h3>
<p>Gets the Name of the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u>  The Task Name</li>
</ul>
<span id=task-settype-tasktype></span><h3 id='task-settype-tasktype-'>TASK:SetType(TaskType)</h3>
<p>Sets the Type of the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> TaskType</li>
</ul>

<h4> Returns </h4>
<span id=task-setinfo-taskinfo></span><h3 id='task-setinfo-taskinfo-'>TASK:SetInfo(TaskInfo)</h3>
<p>Sets the Information on the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> TaskInfo</li>
</ul>

<h4> Returns </h4>
<span id=task-gettype></span><h3 id='task-gettype-'>TASK:GetType()</h3>
<p>Gets the Type of the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> </li>
</ul>
<span id=task-setid-taskid></span><h3 id='task-setid-taskid-'>TASK:SetID(TaskID)</h3>
<p>Sets the ID of the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> TaskID</li>
</ul>

<h4> Returns </h4>
<span id=task-getid></span><h3 id='task-getid-'>TASK:GetID()</h3>
<p>Gets the ID of the Task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> </li>
</ul>
<span id=task-statesuccess></span><h3 id='task-statesuccess-'>TASK:StateSuccess()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Success</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstatesuccess></span><h3 id='task-isstatesuccess-'>TASK:IsStateSuccess()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Success</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-statefailed></span><h3 id='task-statefailed-'>TASK:StateFailed()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Failed</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstatefailed></span><h3 id='task-isstatefailed-'>TASK:IsStateFailed()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Failed</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-stateplanned></span><h3 id='task-stateplanned-'>TASK:StatePlanned()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Planned</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstateplanned></span><h3 id='task-isstateplanned-'>TASK:IsStatePlanned()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Planned</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-stateaborted></span><h3 id='task-stateaborted-'>TASK:StateAborted()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Aborted</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstateaborted></span><h3 id='task-isstateaborted-'>TASK:IsStateAborted()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Aborted</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-statecancelled></span><h3 id='task-statecancelled-'>TASK:StateCancelled()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Cancelled</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstatecancelled></span><h3 id='task-isstatecancelled-'>TASK:IsStateCancelled()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Cancelled</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-stateassigned></span><h3 id='task-stateassigned-'>TASK:StateAssigned()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Assigned</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstateassigned></span><h3 id='task-isstateassigned-'>TASK:IsStateAssigned()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Assigned</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-statehold></span><h3 id='task-statehold-'>TASK:StateHold()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Hold</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstatehold></span><h3 id='task-isstatehold-'>TASK:IsStateHold()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Hold</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-statereplanned></span><h3 id='task-statereplanned-'>TASK:StateReplanned()</h3>
<p>Sets a <a href="#task-module-">Task</a> to status <strong>Replanned</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-isstatereplanned></span><h3 id='task-isstatereplanned-'>TASK:IsStateReplanned()</h3>
<p>Is the <a href="#task-module-">Task</a> status <strong>Replanned</strong>.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-getstatestring></span><h3 id='task-getstatestring-'>TASK:GetStateString()</h3>
<p>Gets the <a href="#task-module-">Task</a> status.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=task-setbriefing-taskbriefing></span><h3 id='task-setbriefing-taskbriefing-'>TASK:SetBriefing(TaskBriefing)</h3>
<p>Sets a <a href="#task-module-">Task</a> briefing.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> TaskBriefing</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
<span id=task-onenterassigned-event-from-to></span><h3 id='task-onenterassigned-event-from-to-'>TASK:onenterAssigned(Event, From, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> Event</li>
<li><u>String</u> From</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onentersuccess-event-from-to></span><h3 id='task-onentersuccess-event-from-to-'>TASK:onenterSuccess(Event, From, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> Event</li>
<li><u>String</u> From</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onenteraborted-from-event-to></span><h3 id='task-onenteraborted-from-event-to-'>TASK:onenterAborted(From, Event, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> From</li>
<li><u>String</u> Event</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onafterreplan-from-event-to></span><h3 id='task-onafterreplan-from-event-to-'>TASK:onafterReplan(From, Event, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> From</li>
<li><u>String</u> Event</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onenterfailed-from-event-to></span><h3 id='task-onenterfailed-from-event-to-'>TASK:onenterFailed(From, Event, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> From</li>
<li><u>String</u> Event</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onstatechange-event-from-to></span><h3 id='task-onstatechange-event-from-to-'>TASK:onstatechange(Event, From, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> Event</li>
<li><u>String</u> From</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onenterplanned-event-from-to></span><h3 id='task-onenterplanned-event-from-to-'>TASK:onenterPlanned(Event, From, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> Event</li>
<li><u>String</u> From</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-onbeforetimeout-event-from-to></span><h3 id='task-onbeforetimeout-event-from-to-'>TASK:onbeforeTimeOut(Event, From, To)</h3>
<p>FSM function for a TASK</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><u>String</u> Event</li>
<li><u>String</u> From</li>
<li><u>String</u> To</li>
</ul>

<h4> Returns </h4>
<span id=task-setdispatcher-dispatcher></span><h3 id='task-setdispatcher-dispatcher-'>TASK:SetDispatcher(Dispatcher)</h3>
<p>Set dispatcher of a task</p>

<h4> Parameters </h4>

<ul>
<li><a href="#task-class-">TASK</a>
self</li>
<li><a href="#detection_manager-class-">DETECTION_MANAGER</a> Dispatcher</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#task-class-">TASK</a></li>
</ul>
