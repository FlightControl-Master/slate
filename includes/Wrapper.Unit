<span id=wrapper-unit-module></span><h1 id='wrapper-unit-module-'>Wrapper.Unit Module</h1>
<p><strong>Wrapper</strong> - UNIT is a wrapper class for the DCS Class Unit.</p>

<p>The <a href="#unit-class">UNIT</a> class is a wrapper class to handle the DCS Unit objects:</p>

<ul>
<li>Support all DCS Unit APIs.</li>
<li>Enhance with Unit specific APIs not in the DCS Unit API set.</li>
<li>Handle local Unit Controller.</li>
<li>Manage the &quot;state&quot; of the DCS Unit.</li>
</ul>
<span id=unit-class></span><h2 id='unit-class-'>UNIT Class</h2>
<pre>
Inheritance : The UNIT Class inherits from the following parents :
BASE
    `-- OBJECT
        `-- IDENTIFIABLE
            `-- POSITIONABLE
                `-- CONTROLLABLE
                    `-- UNIT
</pre>
<span id=unit-register-unitname></span><h3 id='unit-register-unitname-'>UNIT:Register(UnitName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><u>String</u> UnitName : The name of the DCS unit.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>
<span id=unit-find-dcsunit></span><h3 id='unit-find-dcsunit-'>UNIT:Find(DCSUnit)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li>Dcs.DCSWrapper.Unit#Unit DCSUnit : An existing DCS Unit object reference.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>
<span id=unit-findbyname-unitname></span><h3 id='unit-findbyname-unitname-'>UNIT:FindByName(UnitName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><u>String</u> UnitName : The Unit Name.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>
<span id=unit-name></span><h3 id='unit-name-'>UNIT:Name()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> The : UNIT name.</li>
</ul>
<span id=unit-getdcsobject></span><h3 id='unit-getdcsobject-'>UNIT:GetDCSObject()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit self</li>
</ul>
<span id=unit-respawn-spawnvec3-heading></span><h3 id='unit-respawn-spawnvec3-heading-'>UNIT:ReSpawn(SpawnVec3, Heading)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#vec3-class">Vec3</a> SpawnVec3 : The position where to Spawn the new Unit at.</li>
<li><u>Number</u> Heading : The heading of the unit respawn.</li>
</ul>

<h4> Returns </h4>
<span id=unit-isactive></span><h3 id='unit-isactive-'>UNIT:IsActive()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if Unit is activated.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-isalive></span><h3 id='unit-isalive-'>UNIT:IsAlive()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if Unit is alive and active.</li>
<li><u>Boolean</u> false : if Unit is alive but not active.</li>
<li><u>Nil</u> if : the Unit is not existing or is not alive.</li>
</ul>
<span id=unit-getcallsign></span><h3 id='unit-getcallsign-'>UNIT:GetCallsign()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> The : Callsign of the Unit.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getplayername></span><h3 id='unit-getplayername-'>UNIT:GetPlayerName()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> Player : Name</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getnumber></span><h3 id='unit-getnumber-'>UNIT:GetNumber()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> The : Unit number.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getgroup></span><h3 id='unit-getgroup-'>UNIT:GetGroup()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a> self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a> The : Group of the Unit.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getprefix></span><h3 id='unit-getprefix-'>UNIT:GetPrefix()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> The : name of the DCS Unit.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getammo></span><h3 id='unit-getammo-'>UNIT:GetAmmo()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit.Ammo self</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getsensors></span><h3 id='unit-getsensors-'>UNIT:GetSensors()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit.Sensors self</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-hassensors></span><h3 id='unit-hassensors-'>UNIT:HasSensors()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> returns : true if the unit has specified types of sensors. This function is more preferable than Unit.getSensors() if you don&#39;t want to get information about all the unit&#39;s sensors, and just want to check if the unit has specified types of sensors.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-hassead></span><h3 id='unit-hassead-'>UNIT:HasSEAD()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> returns : true if the unit is SEADable.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getradar></span><h3 id='unit-getradar-'>UNIT:GetRadar()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> self : Indicates if at least one of the unit&#39;s radar(s) is on.</li>
<li>Dcs.DCSWrapper.Object#Object The : object of the radar&#39;s interest. Not nil only if at least one radar of the unit is tracking a target.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getfuel></span><h3 id='unit-getfuel-'>UNIT:GetFuel()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> The : relative amount of fuel (from 0.0 to 1.0).</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getunits></span><h3 id='unit-getunits-'>UNIT:GetUnits()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>#list<Wrapper.Unit#UNIT> The : UNITs wrappers.</li>
</ul>
<span id=unit-getlife></span><h3 id='unit-getlife-'>UNIT:GetLife()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> The : Unit&#39;s health value.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getlife0></span><h3 id='unit-getlife0-'>UNIT:GetLife0()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> The : Unit&#39;s initial health value.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-getcategoryname></span><h3 id='unit-getcategoryname-'>UNIT:GetCategoryName()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> Category : name = Helicopter, Airplane, Ground Unit, Ship</li>
</ul>
<span id=unit-getthreatlevel></span><h3 id='unit-getthreatlevel-'>UNIT:GetThreatLevel()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-isinzone-zone></span><h3 id='unit-isinzone-zone-'>UNIT:IsInZone(Zone)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#zone_base-class">ZONE_BASE</a> Zone : The zone to test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Returns : true if the unit is within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>
<span id=unit-isnotinzone-zone></span><h3 id='unit-isnotinzone-zone-'>UNIT:IsNotInZone(Zone)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#zone_base-class">ZONE_BASE</a> Zone : The zone to test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Returns : true if the unit is not within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>
<span id=unit-otherunitinradius-awaitunit-the></span><h3 id='unit-otherunitinradius-awaitunit-the-'>UNIT:OtherUnitInRadius(AwaitUnit, The)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#unit-class">UNIT</a>
AwaitUnit : The other UNIT wrapper object.</li>
<li>Radius The : radius in meters with the DCS Unit in the centre.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>true If : the other DCS Unit is within the radius of the 2D point of the DCS Unit.</li>
<li><u>Nil</u> The : DCS Unit is not existing or alive.</li>
</ul>
<span id=unit-flare-flarecolor></span><h3 id='unit-flare-flarecolor-'>UNIT:Flare(FlareColor)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#flarecolor-class">FLARECOLOR</a> FlareColor</li>
</ul>

<h4> Returns </h4>
<span id=unit-flarewhite></span><h3 id='unit-flarewhite-'>UNIT:FlareWhite()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-flareyellow></span><h3 id='unit-flareyellow-'>UNIT:FlareYellow()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-flaregreen></span><h3 id='unit-flaregreen-'>UNIT:FlareGreen()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-flarered></span><h3 id='unit-flarered-'>UNIT:FlareRed()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-smoke></span><h3 id='unit-smoke-'>UNIT:Smoke()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-smokegreen></span><h3 id='unit-smokegreen-'>UNIT:SmokeGreen()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-smokered></span><h3 id='unit-smokered-'>UNIT:SmokeRed()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-smokewhite></span><h3 id='unit-smokewhite-'>UNIT:SmokeWhite()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-smokeorange></span><h3 id='unit-smokeorange-'>UNIT:SmokeOrange()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-smokeblue></span><h3 id='unit-smokeblue-'>UNIT:SmokeBlue()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=unit-isair></span><h3 id='unit-isair-'>UNIT:IsAir()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Air : category evaluation result.</li>
</ul>
<span id=unit-isground></span><h3 id='unit-isground-'>UNIT:IsGround()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Ground : category evaluation result.</li>
</ul>
<span id=unit-isfriendly></span><h3 id='unit-isfriendly-'>UNIT:IsFriendly()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> IsFriendly : evaluation result.</li>
</ul>
<span id=unit-isship></span><h3 id='unit-isship-'>UNIT:IsShip()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Ship : category evaluation result.</li>
</ul>
<span id=unit-inair></span><h3 id='unit-inair-'>UNIT:InAir()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a> self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if in the air.</li>
<li><u>Nil</u> The : UNIT is not existing or alive.</li>
</ul>
<span id=unit-handleevent-event-eventfunction></span><h3 id='unit-handleevent-event-eventfunction-'>UNIT:HandleEvent(Event, EventFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#events-class">EVENTS</a> Event</li>
<li><u>Function()</u> EventFunction : (optional) The function to be called when the event occurs for the unit.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>
<span id=unit-unhandleevent-event></span><h3 id='unit-unhandleevent-event-'>UNIT:UnHandleEvent(Event)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#events-class">EVENTS</a> Event</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>
<span id=unit-resetevents></span><h3 id='unit-resetevents-'>UNIT:ResetEvents()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>
<span id=unit-sensortype-class></span><h2 id='unit-sensortype-class-'>Unit.SensorType Class</h2>
<pre>
The Unit.SensorType class does not inherit
</pre>

<h4> Attributes </h4>

<ul>
<li>OPTIC self</li>
<li>RADAR self</li>
<li>IRST self</li>
<li>RWR self</li>
</ul>
