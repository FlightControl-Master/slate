<h1 id="wrapper-unit-module">Wrapper.Unit Module</h1>

<p><strong>Wrapper</strong> - UNIT is a wrapper class for the DCS Class Unit.</p>

<p>The <a href="#unit-class">UNIT</a> class is a wrapper class to handle the DCS Unit objects:</p>

<ul>
<li>Support all DCS Unit APIs.</li>
<li>Enhance with Unit specific APIs not in the DCS Unit API set.</li>
<li>Handle local Unit Controller.</li>
<li>Manage the &ldquo;state&rdquo; of the DCS Unit.</li>
</ul>

<h2 id="unit-class">UNIT Class</h2>

<pre>
Inheritance : The UNIT Class inherits from the following parents :
BASE
    `-- OBJECT
        `-- IDENTIFIABLE
            `-- POSITIONABLE
                `-- CONTROLLABLE
                    `-- UNIT
</pre>

<h3 id="unit-register-unitname">UNIT:Register(UnitName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li>string UnitName : The name of the DCS unit.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h3 id="unit-find-dcsunit">UNIT:Find(DCSUnit)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li>Dcs.DCSWrapper.Unit#Unit DCSUnit : An existing DCS Unit object reference.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h3 id="unit-findbyname-unitname">UNIT:FindByName(UnitName)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li>string UnitName : The Unit Name.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h3 id="unit-name">UNIT:Name()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>string The : UNIT name.</li>
</ul>

<h3 id="unit-getdcsobject">UNIT:GetDCSObject()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit self</li>
</ul>

<h3 id="unit-respawn-spawnvec3-heading">UNIT:ReSpawn(SpawnVec3, Heading)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#vec3%20spawnvec3%20:%20the%20position%20where%20to%20spawn%20the%20new%20unit-class">Vec3 SpawnVec3 : The position where to Spawn the new Unit</a> at.</li>
<li>number Heading : The heading of the unit respawn.</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-isactive">UNIT:IsActive()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean true : if Unit is activated.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-isalive">UNIT:IsAlive()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean true : if Unit is alive and active.</li>
<li>boolean false : if Unit is alive but not active.</li>
<li>nil if : the Unit is not existing or is not alive.</li>
</ul>

<h3 id="unit-getcallsign">UNIT:GetCallsign()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>string The : Callsign of the Unit.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getplayername">UNIT:GetPlayerName()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>string Player : Name</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getnumber">UNIT:GetNumber()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>number The : Unit number.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getgroup">UNIT:GetGroup()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a> self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group%20the%20:%20group%20of%20the-class">GROUP The : Group of the</a> Unit.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getprefix">UNIT:GetPrefix()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>string The : name of the DCS Unit.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getammo">UNIT:GetAmmo()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit.Ammo self</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getsensors">UNIT:GetSensors()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit.Sensors self</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-hassensors">UNIT:HasSensors()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean returns : true if the unit has specified types of sensors. This function is more preferable than Unit.getSensors() if you don&rsquo;t want to get information about all the unit&rsquo;s sensors, and just want to check if the unit has specified types of sensors.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-hassead">UNIT:HasSEAD()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean returns : true if the unit is SEADable.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getradar">UNIT:GetRadar()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean self : Indicates if at least one of the unit&rsquo;s radar(s) is on.</li>
<li>Dcs.DCSWrapper.Object#Object The : object of the radar&rsquo;s interest. Not nil only if at least one radar of the unit is tracking a target.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getfuel">UNIT:GetFuel()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>number The : relative amount of fuel (from 0.0 to 1.0).</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getunits">UNIT:GetUnits()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>#list<Wrapper.Unit#UNIT> The : UNITs wrappers.</li>
</ul>

<h3 id="unit-getlife">UNIT:GetLife()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>number The : Unit&rsquo;s health value.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getlife0">UNIT:GetLife0()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>number The : Unit&rsquo;s initial health value.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-getcategoryname">UNIT:GetCategoryName()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>string Category : name = Helicopter, Airplane, Ground Unit, Ship</li>
</ul>

<h3 id="unit-getthreatlevel">UNIT:GetThreatLevel()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-isinzone-zone">UNIT:IsInZone(Zone)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#zone_base%20zone%20:%20the%20zone%20to-class">ZONE_BASE Zone : The zone to</a> test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean Returns : true if the unit is within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>

<h3 id="unit-isnotinzone-zone">UNIT:IsNotInZone(Zone)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#zone_base%20zone%20:%20the%20zone%20to-class">ZONE_BASE Zone : The zone to</a> test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean Returns : true if the unit is not within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>

<h3 id="unit-otherunitinradius-awaitunit-the">UNIT:OtherUnitInRadius(AwaitUnit, The)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#unit-class">UNIT</a>
AwaitUnit : The other UNIT wrapper object.</li>
<li>Radius The : radius in meters with the DCS Unit in the centre.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>true If : the other DCS Unit is within the radius of the 2D point of the DCS Unit.</li>
<li>nil The : DCS Unit is not existing or alive.</li>
</ul>

<h3 id="unit-flare-flarecolor">UNIT:Flare(FlareColor)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#flarecolor-class">FLARECOLOR</a> FlareColor</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-flarewhite">UNIT:FlareWhite()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-flareyellow">UNIT:FlareYellow()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-flaregreen">UNIT:FlareGreen()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-flarered">UNIT:FlareRed()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-smoke">UNIT:Smoke()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-smokegreen">UNIT:SmokeGreen()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-smokered">UNIT:SmokeRed()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-smokewhite">UNIT:SmokeWhite()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-smokeorange">UNIT:SmokeOrange()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-smokeblue">UNIT:SmokeBlue()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<h3 id="unit-isair">UNIT:IsAir()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean Air : category evaluation result.</li>
</ul>

<h3 id="unit-isground">UNIT:IsGround()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean Ground : category evaluation result.</li>
</ul>

<h3 id="unit-isfriendly">UNIT:IsFriendly()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean IsFriendly : evaluation result.</li>
</ul>

<h3 id="unit-isship">UNIT:IsShip()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean Ship : category evaluation result.</li>
</ul>

<h3 id="unit-inair">UNIT:InAir()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a> self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>boolean true : if in the air.</li>
<li>nil The : UNIT is not existing or alive.</li>
</ul>

<h3 id="unit-handleevent-event-eventfunction">UNIT:HandleEvent(Event, EventFunction)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#events-class">EVENTS</a> Event</li>
<li>#function EventFunction : (optional) The function to be called when the event occurs for the unit.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h3 id="unit-unhandleevent-event">UNIT:UnHandleEvent(Event)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
<li><a href="#events-class">EVENTS</a> Event</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h3 id="unit-resetevents">UNIT:ResetEvents()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a>
self</li>
</ul>

<h2 id="unit-sensortype-class">Unit.SensorType Class</h2>

<pre>
**The Unit.SensorType class does not inherit**
</pre>

<h4> Attributes </h4>

<ul>
<li>OPTIC self</li>
<li>RADAR self</li>
<li>IRST self</li>
<li>RWR self</li>
</ul>
