<span id=core-base-module></span><h1 id='core-base-module-'>Core.Base Module</h1>
<p><strong>Core</strong> - BASE forms <strong>the basis of the MOOSE framework</strong>. Each class within the MOOSE framework derives from BASE.</p>

<p><img src="/includes/Pictures/BASE/Dia1.JPG" alt="Banner Image" /></p>

<p>The <a href="#base-class-">BASE</a> class is the core root class from where every other class in moose is derived.</p>
<span id=strong-api-change-history-strong></span><h5 id='strong-api-change-history-strong-'><strong>API CHANGE HISTORY</strong></h5>
<p>The underlying change log documents the API changes. Please read this carefully. The following notation is used:</p>

<ul>
<li><strong>Added</strong> parts are expressed in bold type face.</li>
<li><em>Removed</em> parts are expressed in italic type face.</li>
</ul>

<p>YYYY-MM-DD: CLASS:<strong>NewFunction</strong>( Params ) replaces CLASS:<em>OldFunction</em>( Params )
YYYY-MM-DD: CLASS:<strong>NewFunction( Params )</strong> added</p>

<p>Hereby the change log:</p>
<span id=strong-authors-and-contributions-strong></span><h5 id='strong-authors-and-contributions-strong-'><strong>AUTHORS and CONTRIBUTIONS</strong></h5><span id=contributions></span><h5 id='contributions-'>Contributions:</h5>
<ul>
<li>None.</li>
</ul>
<span id=authors></span><h5 id='authors-'>Authors:</h5>
<ul>
<li><strong>FlightControl</strong>: Design &amp; Programming</li>
</ul>
<span id=base-class></span><h2 id='base-class-'>BASE Class</h2>
<pre>
The BASE class does not inherit
</pre>

<h4> Attributes </h4>

<ul>
<li>ClassName The : name of the class.</li>
<li>ClassID The : ID number of the class.</li>
<li>ClassNameAndID The : name of the class concatenated with the ID number of the class.</li>
</ul>
<span id=base-new></span><h3 id='base-new-'>BASE:New()</h3>
<p>BASE constructor.</p>

<p>This is an example how to use the BASE:New() constructor in a new class definition when inheriting from BASE.</p>

<p>function EVENT:New()
local self = BASE:Inherit( self, BASE:New() ) -- <a href="#event-class-">EVENT</a></p>

<p>return self
end</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#base-class-">BASE</a></li>
</ul>
<span id=base-inherit-is-parent></span><h3 id='base-inherit-is-parent-'>BASE:Inherit(is, Parent)</h3>
<p>This is the worker method to inherit from a parent class.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Child is : the Child class that inherits.</li>
<li><a href="#base-class-">BASE</a>
Parent : is the Parent class that the Child inherits from.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#base-class-">BASE</a></li>
</ul>
<span id=base-getparent-child></span><h3 id='base-getparent-child-'>BASE:GetParent(Child)</h3>
<p>This is the worker method to retrieve the Parent class.
Note that the Parent class must be passed to call the parent class method.</p>

<p>self:GetParent(self):ParentMethod()</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#base-class-">BASE</a>
Child : is the Child class from which the Parent class needs to be retrieved.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#base-class-">BASE</a></li>
</ul>
<span id=base-getclassnameandid></span><h3 id='base-getclassnameandid-'>BASE:GetClassNameAndID()</h3>
<p>Get the ClassName + ClassID of the class instance.
The ClassName + ClassID is formatted as &#39;%s#%09d&#39;.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u>  The ClassName + ClassID of the class instance.</li>
</ul>
<span id=base-getclassname></span><h3 id='base-getclassname-'>BASE:GetClassName()</h3>
<p>Get the ClassName of the class instance.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u>  The ClassName of the class instance.</li>
</ul>
<span id=base-getclassid></span><h3 id='base-getclassid-'>BASE:GetClassID()</h3>
<p>Get the ClassID of the class instance.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u>  The ClassID of the class instance.</li>
</ul>
<span id=base-eventdispatcher></span><h3 id='base-eventdispatcher-'>BASE:EventDispatcher()</h3>
<p>Returns the event dispatcher</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#event-class-">EVENT</a> </li>
</ul>
<span id=base-geteventpriority></span><h3 id='base-geteventpriority-'>BASE:GetEventPriority()</h3>
<p>Get the Class <a href="#event-module-">Event</a> processing Priority.
The Event processing Priority is a number from 1 to 10,
reflecting the order of the classes subscribed to the Event to be processed.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u>  The <a href="#event-module-">Event</a> processing Priority.</li>
</ul>
<span id=base-seteventpriority-eventpriority></span><h3 id='base-seteventpriority-eventpriority-'>BASE:SetEventPriority(EventPriority)</h3>
<p>Set the Class <a href="#event-module-">Event</a> processing Priority.
The Event processing Priority is a number from 1 to 10,
reflecting the order of the classes subscribed to the Event to be processed.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><u>Number</u> EventPriority : The <a href="#event-module-">Event</a> processing Priority.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>self </li>
</ul>
<span id=base-eventremoveall></span><h3 id='base-eventremoveall-'>BASE:EventRemoveAll()</h3>
<p>Remove all subscribed events</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#base-class-">BASE</a></li>
</ul>
<span id=base-handleevent-event-eventfunction></span><h3 id='base-handleevent-event-eventfunction-'>BASE:HandleEvent(Event, EventFunction)</h3>
<p>Subscribe to a DCS Event.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#events-class-">EVENTS</a> Event</li>
<li><u>Function()</u> EventFunction : (optional) The function to be called when the event occurs for the unit.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#base-class-">BASE</a></li>
</ul>
<span id=base-unhandleevent-event></span><h3 id='base-unhandleevent-event-'>BASE:UnHandleEvent(Event)</h3>
<p>UnSubscribe to a DCS event.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#events-class-">EVENTS</a> Event</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#base-class-">BASE</a></li>
</ul>
<span id=base-oneventshot-eventdata></span><h3 id='base-oneventshot-eventdata-'>BASE:OnEventShot(EventData)</h3>
<p>Occurs whenever any unit in a mission fires a weapon. But not any machine gun or autocannon based weapon, those are handled by EVENT.ShootingStart.
@function [parent=#BASE] OnEventShot</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventhit-eventdata></span><h3 id='base-oneventhit-eventdata-'>BASE:OnEventHit(EventData)</h3>
<p>Occurs whenever an object is hit by a weapon.
initiator : The unit object the fired the weapon
weapon: Weapon object that hit the target
target: The Object that was hit.
@function [parent=#BASE] OnEventHit</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventtakeoff-eventdata></span><h3 id='base-oneventtakeoff-eventdata-'>BASE:OnEventTakeoff(EventData)</h3>
<p>Occurs when an aircraft takes off from an airbase, farp, or ship.
initiator : The unit that tookoff
place: Object from where the AI took-off from. Can be an Airbase Object, FARP, or Ships
@function [parent=#BASE] OnEventTakeoff</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventland-eventdata></span><h3 id='base-oneventland-eventdata-'>BASE:OnEventLand(EventData)</h3>
<p>Occurs when an aircraft lands at an airbase, farp or ship
initiator : The unit that has landed
place: Object that the unit landed on. Can be an Airbase Object, FARP, or Ships
@function [parent=#BASE] OnEventLand</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventcrash-eventdata></span><h3 id='base-oneventcrash-eventdata-'>BASE:OnEventCrash(EventData)</h3>
<p>Occurs when any aircraft crashes into the ground and is completely destroyed.
initiator : The unit that has crashed
@function [parent=#BASE] OnEventCrash</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventejection-eventdata></span><h3 id='base-oneventejection-eventdata-'>BASE:OnEventEjection(EventData)</h3>
<p>Occurs when a pilot ejects from an aircraft
initiator : The unit that has ejected
@function [parent=#BASE] OnEventEjection</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventrefueling-eventdata></span><h3 id='base-oneventrefueling-eventdata-'>BASE:OnEventRefueling(EventData)</h3>
<p>Occurs when an aircraft connects with a tanker and begins taking on fuel.
initiator : The unit that is receiving fuel.
@function [parent=#BASE] OnEventRefueling</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventdead-eventdata></span><h3 id='base-oneventdead-eventdata-'>BASE:OnEventDead(EventData)</h3>
<p>Occurs when an object is dead.
initiator : The unit that is dead.
@function [parent=#BASE] OnEventDead</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-onevent-eventdata></span><h3 id='base-onevent-eventdata-'>BASE:OnEvent(EventData)</h3>
<p>Occurs when an object is completely destroyed.
initiator : The unit that is was destroyed.
@function [parent=#BASE] OnEvent</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventpilotdead-eventdata></span><h3 id='base-oneventpilotdead-eventdata-'>BASE:OnEventPilotDead(EventData)</h3>
<p>Occurs when the pilot of an aircraft is killed. Can occur either if the player is alive and crashes or if a weapon kills the pilot without completely destroying the plane.
initiator : The unit that the pilot has died in.
@function [parent=#BASE] OnEventPilotDead</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventbasecaptured-eventdata></span><h3 id='base-oneventbasecaptured-eventdata-'>BASE:OnEventBaseCaptured(EventData)</h3>
<p>Occurs when a ground unit captures either an airbase or a farp.
initiator : The unit that captured the base
place: The airbase that was captured, can be a FARP or Airbase. When calling place:getCoalition() the faction will already be the new owning faction.
@function [parent=#BASE] OnEventBaseCaptured</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventmissionstart-eventdata></span><h3 id='base-oneventmissionstart-eventdata-'>BASE:OnEventMissionStart(EventData)</h3>
<p>Occurs when a mission starts
@function [parent=#BASE] OnEventMissionStart</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventmissionend-eventdata></span><h3 id='base-oneventmissionend-eventdata-'>BASE:OnEventMissionEnd(EventData)</h3>
<p>Occurs when a mission ends
@function [parent=#BASE] OnEventMissionEnd</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventrefuelingstop-eventdata></span><h3 id='base-oneventrefuelingstop-eventdata-'>BASE:OnEventRefuelingStop(EventData)</h3>
<p>Occurs when an aircraft is finished taking fuel.
initiator : The unit that was receiving fuel.
@function [parent=#BASE] OnEventRefuelingStop</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventbirth-eventdata></span><h3 id='base-oneventbirth-eventdata-'>BASE:OnEventBirth(EventData)</h3>
<p>Occurs when any object is spawned into the mission.
initiator : The unit that was spawned
@function [parent=#BASE] OnEventBirth</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventhumanfailure-eventdata></span><h3 id='base-oneventhumanfailure-eventdata-'>BASE:OnEventHumanFailure(EventData)</h3>
<p>Occurs when any system fails on a human controlled aircraft.
initiator : The unit that had the failure
@function [parent=#BASE] OnEventHumanFailure</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventenginestartup-eventdata></span><h3 id='base-oneventenginestartup-eventdata-'>BASE:OnEventEngineStartup(EventData)</h3>
<p>Occurs when any aircraft starts its engines.
initiator : The unit that is starting its engines.
@function [parent=#BASE] OnEventEngineStartup</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventengineshutdown-eventdata></span><h3 id='base-oneventengineshutdown-eventdata-'>BASE:OnEventEngineShutdown(EventData)</h3>
<p>Occurs when any aircraft shuts down its engines.
initiator : The unit that is stopping its engines.
@function [parent=#BASE] OnEventEngineShutdown</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventplayerenterunit-eventdata></span><h3 id='base-oneventplayerenterunit-eventdata-'>BASE:OnEventPlayerEnterUnit(EventData)</h3>
<p>Occurs when any player assumes direct control of a unit.
initiator : The unit that is being taken control of.
@function [parent=#BASE] OnEventPlayerEnterUnit</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventplayerleaveunit-eventdata></span><h3 id='base-oneventplayerleaveunit-eventdata-'>BASE:OnEventPlayerLeaveUnit(EventData)</h3>
<p>Occurs when any player relieves control of a unit to the AI.
initiator : The unit that the player left.
@function [parent=#BASE] OnEventPlayerLeaveUnit</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventshootingstart-eventdata></span><h3 id='base-oneventshootingstart-eventdata-'>BASE:OnEventShootingStart(EventData)</h3>
<p>Occurs when any unit begins firing a weapon that has a high rate of fire. Most common with aircraft cannons (GAU-8), autocannons, and machine guns.
initiator : The unit that is doing the shooing.
target: The unit that is being targeted.
@function [parent=#BASE] OnEventShootingStart</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-oneventshootingend-eventdata></span><h3 id='base-oneventshootingend-eventdata-'>BASE:OnEventShootingEnd(EventData)</h3>
<p>Occurs when any unit stops firing its weapon. Event will always correspond with a shooting start event.
initiator : The unit that was doing the shooing.
@function [parent=#BASE] OnEventShootingEnd</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#eventdata-class-">EVENTDATA</a> EventData : The EventData structure.</li>
</ul>

<h4> Returns </h4>
<span id=base-createeventbirth-eventtime-initiator-iniunitname-self-self></span><h3 id='base-createeventbirth-eventtime-initiator-iniunitname-self-self-'>BASE:CreateEventBirth(EventTime, Initiator, IniUnitName, self, self)</h3>
<p>Creation of a Birth Event.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#time-class-">Time</a> EventTime : The time stamp of the event.</li>
<li>Dcs.DCSWrapper.Object#Object Initiator : The initiating object of the event.</li>
<li><u>String</u> IniUnitName : The initiating unit name.</li>
<li>place self</li>
<li>subplace self</li>
</ul>

<h4> Returns </h4>
<span id=base-createeventcrash-eventtime-initiator></span><h3 id='base-createeventcrash-eventtime-initiator-'>BASE:CreateEventCrash(EventTime, Initiator)</h3>
<p>Creation of a Crash Event.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#time-class-">Time</a> EventTime : The time stamp of the event.</li>
<li>Dcs.DCSWrapper.Object#Object Initiator : The initiating object of the event.</li>
</ul>

<h4> Returns </h4>
<span id=base-onevent-event></span><h3 id='base-onevent-event-'>BASE:onEvent(event)</h3>
<p>The main event handling function... This function captures all events generated for the class.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><a href="#event-class-">Event</a> event</li>
</ul>

<h4> Returns </h4>
<span id=base-setstate-the-the-the></span><h3 id='base-setstate-the-the-the-'>BASE:SetState(The, The, The)</h3>
<p>Set a state or property of the Object given a Key and a Value.
Note that if the Object is destroyed, nillified or garbage collected, then the Values and Keys will also be gone.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Object The : object that will hold the Value set by the Key.</li>
<li>Key The : key that is used as a reference of the value. Note that the key can be a <u>String</u>, but it can also be any other type!</li>
<li>Value The : value to is stored in the object.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>The  Value set.</li>
<li><u>Nil</u>  The Key was not found and thus the Value could not be retrieved.</li>
</ul>
<span id=base-getstate-the-the-the></span><h3 id='base-getstate-the-the-the-'>BASE:GetState(The, The, The)</h3>
<p>Get a Value given a Key from the Object.
Note that if the Object is destroyed, nillified or garbage collected, then the Values and Keys will also be gone.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Object The : object that holds the Value set by the Key.</li>
<li>Key The : key that is used to retrieve the value. Note that the key can be a <u>String</u>, but it can also be any other type!</li>
<li>Value The : value to is stored in the Object.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>The  Value retrieved.</li>
</ul>
<span id=base-traceonoff-traceonoff></span><h3 id='base-traceonoff-traceonoff-'>BASE:TraceOnOff(TraceOnOff)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- Switch the tracing On</span>
<span class="n">BASE</span><span class="p">:</span><span class="n">TraceOnOff</span><span class="p">(</span> <span class="kc">true</span> <span class="p">)</span>

<span class="c1">-- Switch the tracing Off</span>
<span class="n">BASE</span><span class="p">:</span><span class="n">TraceOnOff</span><span class="p">(</span> <span class="kc">false</span> <span class="p">)</span>
</code></pre>
<p>Set trace on or off
Note that when trace is off, no debug statement is performed, increasing performance!
When Moose is loaded statically, (as one file), tracing is switched off by default.
So tracing must be switched on manually in your mission if you are using Moose statically.
When moose is loading dynamically (for moose class development), tracing is switched on by default.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><u>Boolean</u> TraceOnOff : Switch the tracing on or off.</li>
</ul>

<h4> Returns </h4>
<span id=base-istrace></span><h3 id='base-istrace-'>BASE:IsTrace()</h3>
<p>Enquires if tracing is on (for the class).</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> </li>
</ul>
<span id=base-tracelevel-level></span><h3 id='base-tracelevel-level-'>BASE:TraceLevel(Level)</h3>
<p>Set trace level</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><u>Number</u> Level</li>
</ul>

<h4> Returns </h4>
<span id=base-traceall-traceall></span><h3 id='base-traceall-traceall-'>BASE:TraceAll(TraceAll)</h3>
<p>Trace all methods in MOOSE</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><u>Boolean</u> TraceAll : true = trace all methods in MOOSE.</li>
</ul>

<h4> Returns </h4>
<span id=base-traceclass-class></span><h3 id='base-traceclass-class-'>BASE:TraceClass(Class)</h3>
<p>Set tracing for a class</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><u>String</u> Class</li>
</ul>

<h4> Returns </h4>
<span id=base-traceclassmethod-class-method></span><h3 id='base-traceclassmethod-class-method-'>BASE:TraceClassMethod(Class, Method)</h3>
<p>Set tracing for a specific method of  class</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li><u>String</u> Class</li>
<li><u>String</u> Method</li>
</ul>

<h4> Returns </h4>
<span id=base-f-a></span><h3 id='base-f-a-'>BASE:F(A)</h3>
<p>Trace a function call. Must be at the beginning of the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=base-f2-a></span><h3 id='base-f2-a-'>BASE:F2(A)</h3>
<p>Trace a function call level 2. Must be at the beginning of the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=base-f3-a></span><h3 id='base-f3-a-'>BASE:F3(A)</h3>
<p>Trace a function call level 3. Must be at the beginning of the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=base-t-a></span><h3 id='base-t-a-'>BASE:T(A)</h3>
<p>Trace a function logic level 1. Can be anywhere within the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=base-t2-a></span><h3 id='base-t2-a-'>BASE:T2(A)</h3>
<p>Trace a function logic level 2. Can be anywhere within the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=base-t3-a></span><h3 id='base-t3-a-'>BASE:T3(A)</h3>
<p>Trace a function logic level 3. Can be anywhere within the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=base-e-a></span><h3 id='base-e-a-'>BASE:E(A)</h3>
<p>Log an exception which will be traced always. Can be anywhere within the function logic.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#base-class-">BASE</a>
self</li>
<li>Arguments A : <u>List[]</u> or any field.</li>
</ul>

<h4> Returns </h4>
<span id=formation-class></span><h2 id='formation-class-'>FORMATION Class</h2>
<pre>
The FORMATION class does not inherit
</pre>

<h4> Attributes </h4>

<ul>
<li>Cone A : cone formation.</li>
</ul>
