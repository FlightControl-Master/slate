<span id=wrapper-group-module></span><h1 id='wrapper-group-module-'>Wrapper.Group Module</h1>
<p><strong>Wrapper</strong> -- GROUP is a wrapper class for the DCS Class Group.</p>

<p>The <a href="#group-class">GROUP</a> class is a wrapper class to handle the DCS Group objects:</p>

<ul>
<li>Support all DCS Group APIs.</li>
<li>Enhance with Group specific APIs not in the DCS Group API set.</li>
<li>Handle local Group Controller.</li>
<li>Manage the &quot;state&quot; of the DCS Group.</li>
</ul>

<p><strong>IMPORTANT: ONE SHOULD NEVER SANATIZE these GROUP OBJECT REFERENCES! (make the GROUP object references nil).</strong></p>

<p>See the detailed documentation on the GROUP class.</p>
<span id=strong-api-change-history-strong></span><h5 id='strong-api-change-history-strong-'><strong>API CHANGE HISTORY</strong></h5>
<p>The underlying change log documents the API changes. Please read this carefully. The following notation is used:</p>

<ul>
<li><strong>Added</strong> parts are expressed in bold type face.</li>
<li><em>Removed</em> parts are expressed in italic type face.</li>
</ul>

<p>Hereby the change log:</p>

<p>2017-03-26: GROUP:<strong>RouteRTB( RTBAirbase, Speed )</strong> added.</p>

<p>2017-03-07: GROUP:<strong>HandleEvent( Event, EventFunction )</strong> added.
2017-03-07: GROUP:<strong>UnHandleEvent( Event )</strong> added.</p>

<p>2017-01-24: GROUP:<strong>SetAIOnOff( AIOnOff )</strong> added.</p>

<p>2017-01-24: GROUP:<strong>SetAIOn()</strong> added.</p>

<p>2017-01-24: GROUP:<strong>SetAIOff()</strong> added.</p>
<span id=strong-authors-and-contributions-strong></span><h5 id='strong-authors-and-contributions-strong-'><strong>AUTHORS and CONTRIBUTIONS</strong></h5><span id=contributions></span><h5 id='contributions-'>Contributions:</h5>
<ul>
<li><a href="https://forums.eagle.ru/member.php?u=111471"><strong>Entropy</strong></a>, <strong>Afinegan</strong>: Came up with the requirement for AIOnOff().</li>
</ul>
<span id=authors></span><h5 id='authors-'>Authors:</h5>
<ul>
<li><strong>FlightControl</strong>: Design &amp; Programming</li>
</ul>
<span id=group-class></span><h2 id='group-class-'>GROUP Class</h2>
<pre>
Inheritance : The GROUP Class inherits from the following parents :
BASE
    `-- OBJECT
        `-- IDENTIFIABLE
            `-- POSITIONABLE
                `-- CONTROLLABLE
                    `-- GROUP
</pre>

<h4> Attributes </h4>

<ul>
<li><u>String</u> GroupName : The name of the group.</li>
</ul>
<span id=group-register-groupname></span><h3 id='group-register-groupname-'>GROUP:Register(GroupName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li>Dcs.DCSWrapper.Group#Group GroupName : The DCS Group name</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>
<span id=group-find-dcsgroup></span><h3 id='group-find-dcsgroup-'>GROUP:Find(DCSGroup)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li>Dcs.DCSWrapper.Group#Group DCSGroup : The DCS Group.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
The : GROUP.</li>
</ul>
<span id=group-findbyname-groupname></span><h3 id='group-findbyname-groupname-'>GROUP:FindByName(GroupName)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>String</u> GroupName : The DCS Group Name.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
The : GROUP.</li>
</ul>
<span id=group-getdcsobject></span><h3 id='group-getdcsobject-'>GROUP:GetDCSObject()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Group#Group The : DCS Group.</li>
</ul>
<span id=group-isalive></span><h3 id='group-isalive-'>GROUP:IsAlive()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if the Group is alive and active.</li>
<li><u>Boolean</u> false : if the Group is alive but inactive.</li>
<li><u>Nil</u> if : the group does not exist anymore.</li>
</ul>
<span id=group-destroy></span><h3 id='group-destroy-'>GROUP:Destroy()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=group-getcategory></span><h3 id='group-getcategory-'>GROUP:GetCategory()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Group#Group.Category The : category ID</li>
</ul>
<span id=group-getcategoryname></span><h3 id='group-getcategoryname-'>GROUP:GetCategoryName()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> Category : name = Helicopter, Airplane, Ground Unit, Ship</li>
</ul>
<span id=group-getcoalition></span><h3 id='group-getcoalition-'>GROUP:GetCoalition()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSCoalitionWrapper.Object#coalition.side The : coalition side of the DCS Group.</li>
</ul>
<span id=group-getcountry></span><h3 id='group-getcountry-'>GROUP:GetCountry()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#country.id-class">country.id</a> The : country identifier.</li>
<li><u>Nil</u> The : DCS Group is not existing or alive.</li>
</ul>
<span id=group-getunit-unitnumber></span><h3 id='group-getunit-unitnumber-'>GROUP:GetUnit(UnitNumber)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>Number</u> UnitNumber : The number of the UNIT wrapper class to be returned.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#unit-class">UNIT</a> The : UNIT wrapper class.</li>
</ul>
<span id=group-getdcsunit-unitnumber></span><h3 id='group-getdcsunit-unitnumber-'>GROUP:GetDCSUnit(UnitNumber)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>Number</u> UnitNumber : The number of the DCS Unit to be returned.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>Dcs.DCSWrapper.Unit#Unit The : DCS Unit.</li>
</ul>
<span id=group-getsize></span><h3 id='group-getsize-'>GROUP:GetSize()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> The : DCS Group size.</li>
</ul>
<span id=group-getinitialsize></span><h3 id='group-getinitialsize-'>GROUP:GetInitialSize()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> The : DCS Group initial size.</li>
</ul>
<span id=group-getdcsunits></span><h3 id='group-getdcsunits-'>GROUP:GetDCSUnits()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> The : DCS Units.</li>
</ul>
<span id=group-activate></span><h3 id='group-activate-'>GROUP:Activate()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=group-gettypename></span><h3 id='group-gettypename-'>GROUP:GetTypeName()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> The : type name of the group.</li>
</ul>
<span id=group-getcallsign></span><h3 id='group-getcallsign-'>GROUP:GetCallsign()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>String</u> The : CallSign of the first DCS Unit of the DCS Group.</li>
</ul>
<span id=group-getvec2></span><h3 id='group-getvec2-'>GROUP:GetVec2()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#vec2-class">Vec2</a> Current : Vec2 point of the first DCS Unit of the DCS Group.</li>
</ul>
<span id=group-getvec3></span><h3 id='group-getvec3-'>GROUP:GetVec3()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#vec3-class">Vec3</a> Current : Vec3 of the first DCS Unit of the GROUP.</li>
</ul>
<span id=group-getpointvec2></span><h3 id='group-getpointvec2-'>GROUP:GetPointVec2()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#point_vec2-class">POINT_VEC2</a> The : 2D point vector of the first DCS Unit of the GROUP.</li>
<li><u>Nil</u> The : first UNIT is not existing or alive.</li>
</ul>
<span id=group-getrandomvec3-radius></span><h3 id='group-getrandomvec3-radius-'>GROUP:GetRandomVec3(Radius)</h3><pre class="highlight lua tab-lua"><code><span class="c1">-- If Radius is ignored, returns the [Vec3](#vec3-class) of first UNIT of the GROUP</span>
</code></pre>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>Number</u> Radius</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#vec3-class">Vec3</a> The : random 3D point vector around the first UNIT of the GROUP.</li>
<li><u>Nil</u> The : GROUP is invalid or empty</li>
</ul>
<span id=group-getheading></span><h3 id='group-getheading-'>GROUP:GetHeading()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> mean : heading of the GROUP</li>
<li><u>Nil</u> The : first UNIT is not existing or alive.</li>
</ul>
<span id=group-iscompletelyinzone-zone></span><h3 id='group-iscompletelyinzone-zone-'>GROUP:IsCompletelyInZone(Zone)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#zone_base-class">ZONE_BASE</a> Zone : The zone to test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Returns : true if the Group is completely within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>
<span id=group-ispartlyinzone-zone></span><h3 id='group-ispartlyinzone-zone-'>GROUP:IsPartlyInZone(Zone)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#zone_base-class">ZONE_BASE</a> Zone : The zone to test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Returns : true if the Group is partially within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>
<span id=group-isnotinzone-zone></span><h3 id='group-isnotinzone-zone-'>GROUP:IsNotInZone(Zone)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#zone_base-class">ZONE_BASE</a> Zone : The zone to test.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Returns : true if the Group is not within the <a href="#zone_base-class">ZONE_BASE</a></li>
</ul>
<span id=group-isair></span><h3 id='group-isair-'>GROUP:IsAir()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> Air : category evaluation result.</li>
</ul>
<span id=group-ishelicopter></span><h3 id='group-ishelicopter-'>GROUP:IsHelicopter()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if DCS Group contains Helicopters.</li>
</ul>
<span id=group-isairplane></span><h3 id='group-isairplane-'>GROUP:IsAirPlane()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if DCS Group contains AirPlanes.</li>
</ul>
<span id=group-isground></span><h3 id='group-isground-'>GROUP:IsGround()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if DCS Group contains Ground troops.</li>
</ul>
<span id=group-isship></span><h3 id='group-isship-'>GROUP:IsShip()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if DCS Group contains Ships.</li>
</ul>
<span id=group-allonground></span><h3 id='group-allonground-'>GROUP:AllOnGround()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> All : units on the ground result.</li>
</ul>
<span id=group-setaionoff-aionoff></span><h3 id='group-setaionoff-aionoff-'>GROUP:SetAIOnOff(AIOnOff)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>Boolean</u> AIOnOff : The value true turns the AI On, the value false turns the AI Off.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
The : GROUP.</li>
</ul>
<span id=group-setaion></span><h3 id='group-setaion-'>GROUP:SetAIOn()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
The : GROUP.</li>
</ul>
<span id=group-setaioff></span><h3 id='group-setaioff-'>GROUP:SetAIOff()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
The : GROUP.</li>
</ul>
<span id=group-getmaxvelocity></span><h3 id='group-getmaxvelocity-'>GROUP:GetMaxVelocity()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> Maximum : velocity found.</li>
</ul>
<span id=group-getminheight></span><h3 id='group-getminheight-'>GROUP:GetMinHeight()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> Minimum : height found.</li>
</ul>
<span id=group-getmaxheight></span><h3 id='group-getmaxheight-'>GROUP:GetMaxHeight()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u> Maximum : height found.</li>
</ul>
<span id=group-respawn-template></span><h3 id='group-respawn-template-'>GROUP:Respawn(Template)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a> self</li>
<li><u>List[]</u> Template : The template of the Group retrieved with GROUP:GetTemplate()</li>
</ul>

<h4> Returns </h4>
<span id=group-gettemplate></span><h3 id='group-gettemplate-'>GROUP:GetTemplate()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> self</li>
</ul>
<span id=group-settemplatecontrolled-controlled></span><h3 id='group-settemplatecontrolled-controlled-'>GROUP:SetTemplateControlled(Controlled)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>Boolean</u> Controlled : true is controlled, false is uncontrolled.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> self</li>
</ul>
<span id=group-settemplatecountry-countryid></span><h3 id='group-settemplatecountry-countryid-'>GROUP:SetTemplateCountry(CountryID)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#country.id-class">country.id</a> CountryID : The country ID.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> self</li>
</ul>
<span id=group-settemplatecoalition-coalitionid></span><h3 id='group-settemplatecoalition-coalitionid-'>GROUP:SetTemplateCoalition(CoalitionID)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li>Dcs.DCSCoalitionWrapper.Object#coalition.side CoalitionID : The coalition ID.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> self</li>
</ul>
<span id=group-gettaskmission></span><h3 id='group-gettaskmission-'>GROUP:GetTaskMission()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> The : MissionTemplate</li>
</ul>
<span id=group-gettaskroute></span><h3 id='group-gettaskroute-'>GROUP:GetTaskRoute()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> The : mission route defined by points.</li>
</ul>
<span id=group-copyroute-begin-end-randomize-radius></span><h3 id='group-copyroute-begin-end-randomize-radius-'>GROUP:CopyRoute(Begin, End, Randomize, Radius)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><u>Number</u> Begin : The route point from where the copy will start. The base route point is 0.</li>
<li><u>Number</u> End : The route point where the copy will end. The End point is the last point - the End point. The last point has base 0.</li>
<li><u>Boolean</u> Randomize : Randomization of the route, when true.</li>
<li><u>Number</u> Radius : When randomization is on, the randomization is within the radius.</li>
</ul>

<h4> Returns </h4>
<span id=group-calculatethreatlevela2g></span><h3 id='group-calculatethreatlevela2g-'>GROUP:CalculateThreatLevelA2G()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>
<span id=group-inair></span><h3 id='group-inair-'>GROUP:InAir()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a> self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Boolean</u> true : if in the first unit of the group is in the air.</li>
<li><u>Nil</u> The : GROUP is not existing or not alive.</li>
</ul>
<span id=group-routertb-rtbairbase-speed></span><h3 id='group-routertb-rtbairbase-speed-'>GROUP:RouteRTB(RTBAirbase, Speed)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#airbase-class">AIRBASE</a> RTBAirbase : (optional) The <a href="#airbase-module">Airbase</a> to return to. If blank, the controllable will return to the nearest friendly airbase.</li>
<li><u>Number</u> Speed : (optional) The Speed, if no Speed is given, the maximum Speed of the first unit is selected.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>
<span id=group-handleevent-event-eventfunction></span><h3 id='group-handleevent-event-eventfunction-'>GROUP:HandleEvent(Event, EventFunction)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#events-class">EVENTS</a> Event</li>
<li><u>Function()</u> EventFunction : (optional) The function to be called when the event occurs for the GROUP.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>
<span id=group-unhandleevent-event></span><h3 id='group-unhandleevent-event-'>GROUP:UnHandleEvent(Event)</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
<li><a href="#events-class">EVENTS</a> Event</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>
<span id=group-resetevents></span><h3 id='group-resetevents-'>GROUP:ResetEvents()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>
<span id=group-getplayernames></span><h3 id='group-getplayernames-'>GROUP:GetPlayerNames()</h3>
<h4> Parameters </h4>

<ul>
<li><a href="#group-class">GROUP</a>
self</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>List[]</u> The : group has players, an array of player names is returned.</li>
<li><u>Nil</u> The : group has no players</li>
</ul>
