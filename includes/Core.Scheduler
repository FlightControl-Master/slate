<h1 id="core-scheduler-module">Core.Scheduler Module</h1>

<p><strong>Core</strong> - SCHEDULER prepares and handles the <strong>execution of functions over scheduled time (intervals)</strong>.</p>

<p><img src="/includes/Pictures/SCHEDULER/Dia1.JPG" alt="Banner Image" /></p>

<h4> 1) [SCHEDULER](#scheduler-class) class, extends [BASE](#base-class)</h4>

<p>The <a href="#scheduler-class">SCHEDULER</a> class creates schedule.</p>

<h4> 1.1) SCHEDULER constructor</h4>

<p>The SCHEDULER class is quite easy to use, but note that the New constructor has variable parameters:</p>

<ul>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> nil ): Setup a new SCHEDULER object, which is persistently executed after garbage collection.</li>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> Object ): Setup a new SCHEDULER object, which is linked to the Object. When the Object is nillified or destroyed, the SCHEDULER object will also be destroyed and stopped after garbage collection.</li>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> nil, Function, FunctionArguments, Start, &hellip; ): Setup a new persistent SCHEDULER object, and start a new schedule for the Function with the defined FunctionArguments according the Start and sequent parameters.</li>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> Object, Function, FunctionArguments, Start, &hellip; ): Setup a new SCHEDULER object, linked to Object, and start a new schedule for the Function with the defined FunctionArguments according the Start and sequent parameters.</li>
</ul>

<h4> 1.2) SCHEDULER timer stopping and (re-)starting.</h4>

<p>The SCHEDULER can be stopped and restarted with the following methods:</p>

<ul>
<li><a href="#scheduler-start-scheduleid">SCHEDULER:Start()</a>: (Re-)Start the schedules within the SCHEDULER object. If a CallID is provided to :Start(), only the schedule referenced by CallID will be (re-)started.</li>
<li><a href="#scheduler-stop-scheduleid">SCHEDULER:Stop()</a>: Stop the schedules within the SCHEDULER object. If a CallID is provided to :Stop(), then only the schedule referenced by CallID will be stopped.</li>
</ul>

<h4> 1.3) Create a new schedule</h4>

<p>With <a href="#scheduler-schedule-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:Schedule()</a> a new time event can be scheduled. This function is used by the :New() constructor when a new schedule is planned.</p>

<h4> Contributions:</h4>

<ul>
<li>FlightControl : Concept &amp; Testing</li>
</ul>

<h4> Authors:</h4>

<ul>
<li>FlightControl : Design &amp; Programming</li>
</ul>

<h4> Test Missions:</h4>

<ul>
<li>SCH - Scheduler</li>
</ul>

<h2 id="scheduler-class">SCHEDULER Class</h2>

<pre>
Inheritance : The SCHEDULER Class inherits from the following parents :
BASE
    `-- SCHEDULER
</pre>

<h4> Attributes </h4>

<ul>
<li>number ScheduleID : the ID of the scheduler.</li>
</ul>

<h3 id="scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New(SchedulerObject, SchedulerFunction, SchedulerArguments, Start, Repeat, RandomizeFactor, Stop)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self</li>
<li>table[] SchedulerObject : Specified for which Moose object the timer is setup. If a value of nil is provided, a scheduler will be setup without an object reference.</li>
<li>#function SchedulerFunction : The event function to be called when a timer event occurs. The event function needs to accept the parameters specified in SchedulerArguments.</li>
<li>table[] SchedulerArguments : Optional arguments that can be given as part of scheduler. The arguments need to be given as a table { param1, param 2, &hellip; }.</li>
<li>number Start : Specifies the amount of seconds that will be waited before the scheduling is started, and the event function is called.</li>
<li>number Repeat : Specifies the interval in seconds when the scheduler will call the event function.</li>
<li>number RandomizeFactor : Specifies a randomization factor between 0 and 1 to randomize the Repeat.</li>
<li>number Stop : Specifies the amount of seconds when the scheduler will be stopped.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self.</li>
<li>number The : ScheduleID of the planned schedule.</li>
</ul>

<h3 id="scheduler-schedule-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:Schedule(SchedulerObject, SchedulerFunction, SchedulerArguments, Start, Repeat, RandomizeFactor, Stop)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self</li>
<li>table[] SchedulerObject : Specified for which Moose object the timer is setup. If a value of nil is provided, a scheduler will be setup without an object reference.</li>
<li>#function SchedulerFunction : The event function to be called when a timer event occurs. The event function needs to accept the parameters specified in SchedulerArguments.</li>
<li>table[] SchedulerArguments : Optional arguments that can be given as part of scheduler. The arguments need to be given as a table { param1, param 2, &hellip; }.</li>
<li>number Start : Specifies the amount of seconds that will be waited before the scheduling is started, and the event function is called.</li>
<li>number Repeat : Specifies the interval in seconds when the scheduler will call the event function.</li>
<li>number RandomizeFactor : Specifies a randomization factor between 0 and 1 to randomize the Repeat.</li>
<li>number Stop : Specifies the amount of seconds when the scheduler will be stopped.</li>
</ul>

<h4> Returns </h4>

<ul>
<li>number The : ScheduleID of the planned schedule.</li>
</ul>

<h3 id="scheduler-start-scheduleid">SCHEDULER:Start(ScheduleID)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self</li>
<li>number ScheduleID : (optional) The ScheduleID of the planned (repeating) schedule.</li>
</ul>

<h4> Returns </h4>

<h3 id="scheduler-stop-scheduleid">SCHEDULER:Stop(ScheduleID)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self</li>
<li>number ScheduleID : (optional) The ScheduleID of the planned (repeating) schedule.</li>
</ul>

<h4> Returns </h4>

<h3 id="scheduler-remove-scheduleid">SCHEDULER:Remove(ScheduleID)</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self</li>
<li>number ScheduleID : (optional) The ScheduleID of the planned (repeating) schedule.</li>
</ul>

<h4> Returns </h4>

<h3 id="scheduler-clear">SCHEDULER:Clear()</h3>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class">SCHEDULER</a>
self</li>
</ul>

<h4> Returns </h4>
