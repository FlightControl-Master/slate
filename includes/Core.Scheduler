<span id=core-scheduler-module></span><h1 id='core-scheduler-module-'>Core.Scheduler Module</h1>
<p><strong>Core</strong> - SCHEDULER prepares and handles the <strong>execution of functions over scheduled time (intervals)</strong>.</p>

<p><img src="/includes/Pictures/SCHEDULER/Dia1.JPG" alt="Banner Image" /></p>

<p>SCHEDULER manages the <strong>scheduling of functions</strong>:</p>

<ul>
<li>optionally in an optional specified time interval,</li>
<li>optionally <strong>repeating</strong> with a specified time repeat interval,</li>
<li>optionally <strong>randomizing</strong> with a specified time interval randomization factor,</li>
<li>optionally <strong>stop</strong> the repeating after a specified time interval.</li>
</ul>
<span id=demo-missions></span><h5 id='demo-missions-'>Demo Missions</h5><span id=a-href-https-github-com-flightcontrol-master-moose_missions-tree-master-release-sch-20-20scheduler-scheduler-demo-missions-source-code-a></span><h5 id='a-href-https-github-com-flightcontrol-master-moose_missions-tree-master-release-sch-20-20scheduler-scheduler-demo-missions-source-code-a-'><a href="https://github.com/FlightControl-Master/MOOSE_MISSIONS/tree/master-release/SCH%20-%20Scheduler">SCHEDULER Demo Missions source code</a></h5><span id=a-href-https-github-com-flightcontrol-master-moose_missions-tree-master-sch-20-20scheduler-scheduler-demo-missions-only-for-beta-testers-a></span><h5 id='a-href-https-github-com-flightcontrol-master-moose_missions-tree-master-sch-20-20scheduler-scheduler-demo-missions-only-for-beta-testers-a-'><a href="https://github.com/FlightControl-Master/MOOSE_MISSIONS/tree/master/SCH%20-%20Scheduler">SCHEDULER Demo Missions, only for beta testers</a></h5><span id=a-href-https-github-com-flightcontrol-master-moose_missions-releases-all-demo-missions-pack-of-the-last-release-a></span><h5 id='a-href-https-github-com-flightcontrol-master-moose_missions-releases-all-demo-missions-pack-of-the-last-release-a-'><a href="https://github.com/FlightControl-Master/MOOSE_MISSIONS/releases">ALL Demo Missions pack of the last release</a></h5><span id=youtube-channel></span><h5 id='youtube-channel-'>YouTube Channel</h5><span id=a-href-scheduler-youtube-channel-none-a></span><h5 id='a-href-scheduler-youtube-channel-none-a-'><a href="#">SCHEDULER YouTube Channel (none)</a></h5><span id=contributions></span><h5 id='contributions-'>Contributions:</h5>
<ul>
<li>FlightControl : Concept &amp; Testing</li>
</ul>
<span id=authors></span><h5 id='authors-'>Authors:</h5>
<ul>
<li>FlightControl : Design &amp; Programming</li>
</ul>
<span id=scheduler-class></span><h2 id='scheduler-class-'>SCHEDULER Class</h2>
<pre>
Inheritance : The SCHEDULER Class inherits from the following parents :
BASE
    `-- SCHEDULER
</pre>

<p>The SCHEDULER class creates schedule.</p>

<p>A SCHEDULER can manage <strong>multiple</strong> (repeating) schedules. Each planned or executing schedule has a unique <strong>ScheduleID</strong>.
The ScheduleID is returned when the method <a href="#scheduler-schedule-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:Schedule()</a> is called.
It is recommended to store the ScheduleID in a variable, as it is used in the methods <a href="#start-module-">Start</a>() and <a href="#stop-module-">Stop</a>(),
which can start and stop specific repeating schedules respectively within a SCHEDULER object.</p>
<span id=scheduler-constructor></span><h5 id='scheduler-constructor-'>SCHEDULER constructor</h5>
<p>The SCHEDULER class is quite easy to use, but note that the New constructor has variable parameters:</p>

<p>The <a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> method returns 2 variables:</p>

<ol>
<li>The SCHEDULER object reference.</li>
<li>The first schedule planned in the SCHEDULER object.</li>
</ol>

<p>To clarify the different appliances, lets have a look at the following examples:</p>
<span id=construct-a-scheduler-object-without-a-persistent-schedule></span><h5 id='construct-a-scheduler-object-without-a-persistent-schedule-'>Construct a SCHEDULER object without a persistent schedule.</h5>
<ul>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> nil ): Setup a new SCHEDULER object, which is persistently executed after garbage collection.</li>
</ul>

<p>SchedulerObject = SCHEDULER:New()
SchedulerID = SchedulerObject:Schedule( nil, ScheduleFunction, {} )</p>

<p>The above example creates a new SchedulerObject, but does not schedule anything.
A separate schedule is created by using the SchedulerObject using the method :Schedule..., which returns a ScheduleID</p>
<span id=construct-a-scheduler-object-without-a-volatile-schedule-but-volatile-to-the-object-existence></span><h5 id='construct-a-scheduler-object-without-a-volatile-schedule-but-volatile-to-the-object-existence-'>Construct a SCHEDULER object without a volatile schedule, but volatile to the Object existence...</h5>
<ul>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> Object ): Setup a new SCHEDULER object, which is linked to the Object. When the Object is nillified or destroyed, the SCHEDULER object will also be destroyed and stopped after garbage collection.</li>
</ul>

<p>ZoneObject = ZONE:New( &quot;ZoneName&quot; )
SchedulerObject = SCHEDULER:New( ZoneObject )
SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {} )
...
ZoneObject = nil
garbagecollect()</p>

<p>The above example creates a new SchedulerObject, but does not schedule anything, and is bound to the existence of ZoneObject, which is a ZONE.
A separate schedule is created by using the SchedulerObject using the method :Schedule()..., which returns a ScheduleID
Later in the logic, the ZoneObject is put to nil, and garbage is collected.
As a result, the ScheduleObject will cancel any planned schedule.</p>
<span id=construct-a-scheduler-object-with-a-persistent-schedule></span><h5 id='construct-a-scheduler-object-with-a-persistent-schedule-'>Construct a SCHEDULER object with a persistent schedule.</h5>
<ul>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> nil, Function, FunctionArguments, Start, ... ): Setup a new persistent SCHEDULER object, and start a new schedule for the Function with the defined FunctionArguments according the Start and sequent parameters.</li>
</ul>

<p>SchedulerObject, SchedulerID = SCHEDULER:New( nil, ScheduleFunction, {} )</p>

<p>The above example creates a new SchedulerObject, and does schedule the first schedule as part of the call.
Note that 2 variables are returned here: SchedulerObject, ScheduleID...</p>
<span id=construct-a-scheduler-object-without-a-schedule-but-volatile-to-the-object-existence></span><h5 id='construct-a-scheduler-object-without-a-schedule-but-volatile-to-the-object-existence-'>Construct a SCHEDULER object without a schedule, but volatile to the Object existence...</h5>
<ul>
<li><a href="#scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:New()</a> Object, Function, FunctionArguments, Start, ... ): Setup a new SCHEDULER object, linked to Object, and start a new schedule for the Function with the defined FunctionArguments according the Start and sequent parameters.</li>
</ul>

<p>ZoneObject = ZONE:New( &quot;ZoneName&quot; )
SchedulerObject, SchedulerID = SCHEDULER:New( ZoneObject, ScheduleFunction, {} )
SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {} )
...
ZoneObject = nil
garbagecollect()</p>

<p>The above example creates a new SchedulerObject, and schedules a method call (ScheduleFunction),
and is bound to the existence of ZoneObject, which is a ZONE object (ZoneObject).
Both a ScheduleObject and a SchedulerID variable are returned.
Later in the logic, the ZoneObject is put to nil, and garbage is collected.
As a result, the ScheduleObject will cancel the planned schedule.</p>
<span id=scheduler-timer-stopping-and-re-starting></span><h5 id='scheduler-timer-stopping-and-re-starting-'>SCHEDULER timer stopping and (re-)starting.</h5>
<p>The SCHEDULER can be stopped and restarted with the following methods:</p>

<ul>
<li><a href="#scheduler-start-scheduleid">SCHEDULER:Start()</a>: (Re-)Start the schedules within the SCHEDULER object. If a CallID is provided to :Start(), only the schedule referenced by CallID will be (re-)started.</li>
<li><a href="#scheduler-stop-scheduleid">SCHEDULER:Stop()</a>: Stop the schedules within the SCHEDULER object. If a CallID is provided to :Stop(), then only the schedule referenced by CallID will be stopped.</li>
</ul>

<p>ZoneObject = ZONE:New( &quot;ZoneName&quot; )
SchedulerObject, SchedulerID = SCHEDULER:New( ZoneObject, ScheduleFunction, {} )
SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {}, 10, 10 )
...
SchedulerObject:Stop( SchedulerID )
...
SchedulerObject:Start( SchedulerID )</p>

<p>The above example creates a new SchedulerObject, and does schedule the first schedule as part of the call.
Note that 2 variables are returned here: SchedulerObject, ScheduleID...
Later in the logic, the repeating schedule with SchedulerID is stopped.
A bit later, the repeating schedule with SchedulerId is (re)-started.</p>
<span id=create-a-new-schedule></span><h5 id='create-a-new-schedule-'>Create a new schedule</h5>
<p>With the method <a href="#scheduler-schedule-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop">SCHEDULER:Schedule()</a> a new time event can be scheduled.
This method is used by the :New() constructor when a new schedule is planned.</p>

<p>Consider the following code fragment of the SCHEDULER object creation.</p>

<p>ZoneObject = ZONE:New( &quot;ZoneName&quot; )
SchedulerObject = SCHEDULER:New( ZoneObject )</p>

<p>Several parameters can be specified that influence the behaviour of a Schedule.</p>
<span id=a-single-schedule-immediately-executed></span><h5 id='a-single-schedule-immediately-executed-'>A single schedule, immediately executed</h5>
<p>SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {} )</p>

<p>The above example schedules a new ScheduleFunction call to be executed asynchronously, within milleseconds ...</p>
<span id=a-single-schedule-planned-over-time></span><h5 id='a-single-schedule-planned-over-time-'>A single schedule, planned over time</h5>
<p>SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {}, 10 )</p>

<p>The above example schedules a new ScheduleFunction call to be executed asynchronously, within 10 seconds ...</p>
<span id=a-schedule-with-a-repeating-time-interval-planned-over-time></span><h5 id='a-schedule-with-a-repeating-time-interval-planned-over-time-'>A schedule with a repeating time interval, planned over time</h5>
<p>SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {}, 10, 60 )</p>

<p>The above example schedules a new ScheduleFunction call to be executed asynchronously, within 10 seconds,
and repeating 60 every seconds ...</p>
<span id=a-schedule-with-a-repeating-time-interval-planned-over-time-with-time-interval-randomization></span><h5 id='a-schedule-with-a-repeating-time-interval-planned-over-time-with-time-interval-randomization-'>A schedule with a repeating time interval, planned over time, with time interval randomization</h5>
<p>SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {}, 10, 60, 0.5 )</p>

<p>The above example schedules a new ScheduleFunction call to be executed asynchronously, within 10 seconds,
and repeating 60 seconds, with a 50% time interval randomization ...
So the repeating time interval will be randomized using the <strong>0.5</strong>,
and will calculate between <strong>60 - ( 60 * 0.5 )</strong> and <strong>60 + ( 60 * 0.5 )</strong> for each repeat,
which is in this example between <strong>30</strong> and <strong>90</strong> seconds.</p>
<span id=a-schedule-with-a-repeating-time-interval-planned-over-time-with-time-interval-randomization-and-stop-after-a-time-interval></span><h5 id='a-schedule-with-a-repeating-time-interval-planned-over-time-with-time-interval-randomization-and-stop-after-a-time-interval-'>A schedule with a repeating time interval, planned over time, with time interval randomization, and stop after a time interval</h5>
<p>SchedulerID = SchedulerObject:Schedule( ZoneObject, ScheduleFunction, {}, 10, 60, 0.5, 300 )</p>

<p>The above example schedules a new ScheduleFunction call to be executed asynchronously, within 10 seconds,
The schedule will repeat every 60 seconds.
So the repeating time interval will be randomized using the <strong>0.5</strong>,
and will calculate between <strong>60 - ( 60 * 0.5 )</strong> and <strong>60 + ( 60 * 0.5 )</strong> for each repeat,
which is in this example between <strong>30</strong> and <strong>90</strong> seconds.
The schedule will stop after <strong>300</strong> seconds.</p>

<p>The SCHEDULER class</p>

<h4> Attributes </h4>

<ul>
<li><u>Number</u> ScheduleID : the ID of the scheduler.</li>
</ul>
<span id=scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop></span><h3 id='scheduler-new-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop-'>SCHEDULER:New(SchedulerObject, SchedulerFunction, SchedulerArguments, Start, Repeat, RandomizeFactor, Stop)</h3>
<p>SCHEDULER constructor.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a>
self</li>
<li><u>List[]</u> SchedulerObject : Specified for which Moose object the timer is setup. If a value of nil is provided, a scheduler will be setup without an object reference.</li>
<li><u>Function()</u> SchedulerFunction : The event function to be called when a timer event occurs. The event function needs to accept the parameters specified in SchedulerArguments.</li>
<li><u>List[]</u> SchedulerArguments : Optional arguments that can be given as part of scheduler. The arguments need to be given as a table { param1, param 2, ... }.</li>
<li><u>Number</u> Start : Specifies the amount of seconds that will be waited before the scheduling is started, and the event function is called.</li>
<li><u>Number</u> Repeat : Specifies the interval in seconds when the scheduler will call the event function.</li>
<li><u>Number</u> RandomizeFactor : Specifies a randomization factor between 0 and 1 to randomize the Repeat.</li>
<li><u>Number</u> Stop : Specifies the amount of seconds when the scheduler will be stopped.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><p><a href="#scheduler-class-">SCHEDULER</a></p></li>
<li><p><u>Number</u>  The ScheduleID of the planned schedule.</p></li>
</ul>
<span id=scheduler-schedule-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop></span><h3 id='scheduler-schedule-schedulerobject-schedulerfunction-schedulerarguments-start-repeat-randomizefactor-stop-'>SCHEDULER:Schedule(SchedulerObject, SchedulerFunction, SchedulerArguments, Start, Repeat, RandomizeFactor, Stop)</h3>
<p>Schedule a new time event. Note that the schedule will only take place if the scheduler is <em>started</em>. Even for a single schedule event, the scheduler needs to be started also.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a>
self</li>
<li><u>List[]</u> SchedulerObject : Specified for which Moose object the timer is setup. If a value of nil is provided, a scheduler will be setup without an object reference.</li>
<li><u>Function()</u> SchedulerFunction : The event function to be called when a timer event occurs. The event function needs to accept the parameters specified in SchedulerArguments.</li>
<li><u>List[]</u> SchedulerArguments : Optional arguments that can be given as part of scheduler. The arguments need to be given as a table { param1, param 2, ... }.</li>
<li><u>Number</u> Start : Specifies the amount of seconds that will be waited before the scheduling is started, and the event function is called.</li>
<li><u>Number</u> Repeat : Specifies the interval in seconds when the scheduler will call the event function.</li>
<li><u>Number</u> RandomizeFactor : Specifies a randomization factor between 0 and 1 to randomize the Repeat.</li>
<li><u>Number</u> Stop : Specifies the amount of seconds when the scheduler will be stopped.</li>
</ul>

<h4> Returns </h4>

<ul>
<li><u>Number</u>  The ScheduleID of the planned schedule.</li>
</ul>
<span id=scheduler-start-scheduleid></span><h3 id='scheduler-start-scheduleid-'>SCHEDULER:Start(ScheduleID)</h3>
<p>(Re-)Starts the schedules or a specific schedule if a valid ScheduleID is provided.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a>
self</li>
<li><u>Number</u> ScheduleID : (optional) The ScheduleID of the planned (repeating) schedule.</li>
</ul>

<h4> Returns </h4>
<span id=scheduler-stop-scheduleid></span><h3 id='scheduler-stop-scheduleid-'>SCHEDULER:Stop(ScheduleID)</h3>
<p>Stops the schedules or a specific schedule if a valid ScheduleID is provided.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a>
self</li>
<li><u>Number</u> ScheduleID : (optional) The ScheduleID of the planned (repeating) schedule.</li>
</ul>

<h4> Returns </h4>
<span id=scheduler-remove-scheduleid></span><h3 id='scheduler-remove-scheduleid-'>SCHEDULER:Remove(ScheduleID)</h3>
<p>Removes a specific schedule if a valid ScheduleID is provided.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a>
self</li>
<li><u>Number</u> ScheduleID : (optional) The ScheduleID of the planned (repeating) schedule.</li>
</ul>

<h4> Returns </h4>
<span id=scheduler-clear></span><h3 id='scheduler-clear-'>SCHEDULER:Clear()</h3>
<p>Clears all pending schedules.</p>

<h4> Parameters </h4>

<ul>
<li><a href="#scheduler-class-">SCHEDULER</a>
self</li>
</ul>

<h4> Returns </h4>
